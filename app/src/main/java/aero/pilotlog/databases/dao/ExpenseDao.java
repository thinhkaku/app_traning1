package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Expense;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXPENSE.
*/
public class ExpenseDao extends AbstractDao<Expense, byte[]> {

    public static final String TABLENAME = "EXPENSE";

    /**
     * Properties of entity Expense.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExpCode = new Property(0, byte[].class, "ExpCode", true, "EXPCODE");
        public final static Property ExpDate = new Property(1, String.class, "ExpDate", false, "EXPDATE");
        public final static Property ETCode = new Property(2, Integer.class, "ETCode", false, "ETCODE");
        public final static Property Description = new Property(3, String.class, "Description", false, "DESCRIPTION");
        public final static Property Amount = new Property(4, Long.class, "Amount", false, "AMOUNT");
        public final static Property CurrCode = new Property(5, Integer.class, "CurrCode", false, "CURRCODE");
        public final static Property AmountForeign = new Property(6, Long.class, "AmountForeign", false, "AMOUNTFOREIGN");
        public final static Property CurrCodeForeign = new Property(7, Integer.class, "CurrCodeForeign", false, "CURRCODEFOREIGN");
        public final static Property LinkTable = new Property(8, Integer.class, "LinkTable", false, "LINKTABLE");
        public final static Property LinkCode = new Property(9, byte[].class, "LinkCode", false, "LINKCODE");
        public final static Property Record_Modified = new Property(10, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(11, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public ExpenseDao(DaoConfig config) {
        super(config);
    }
    
    public ExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXPENSE' (" + //
                "'EXPCODE' BLOB PRIMARY KEY ," + // 0: ExpCode
                "'EXPDATE' TEXT," + // 1: ExpDate
                "'ETCODE' INTEGER," + // 2: ETCode
                "'DESCRIPTION' TEXT," + // 3: Description
                "'AMOUNT' INTEGER," + // 4: Amount
                "'CURRCODE' INTEGER," + // 5: CurrCode
                "'AMOUNTFOREIGN' INTEGER," + // 6: AmountForeign
                "'CURRCODEFOREIGN' INTEGER," + // 7: CurrCodeForeign
                "'LINKTABLE' INTEGER," + // 8: LinkTable
                "'LINKCODE' BLOB," + // 9: LinkCode
                "'RECORD_MODIFIED' INTEGER," + // 10: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 11: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXPENSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Expense entity) {
        stmt.clearBindings();
 
        byte[] ExpCode = entity.getExpCode();
        if (ExpCode != null) {
            stmt.bindBlob(1, ExpCode);
        }
 
        String ExpDate = entity.getExpDate();
        if (ExpDate != null) {
            stmt.bindString(2, ExpDate);
        }
 
        Integer ETCode = entity.getETCode();
        if (ETCode != null) {
            stmt.bindLong(3, ETCode);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
 
        Long Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindLong(5, Amount);
        }
 
        Integer CurrCode = entity.getCurrCode();
        if (CurrCode != null) {
            stmt.bindLong(6, CurrCode);
        }
 
        Long AmountForeign = entity.getAmountForeign();
        if (AmountForeign != null) {
            stmt.bindLong(7, AmountForeign);
        }
 
        Integer CurrCodeForeign = entity.getCurrCodeForeign();
        if (CurrCodeForeign != null) {
            stmt.bindLong(8, CurrCodeForeign);
        }
 
        Integer LinkTable = entity.getLinkTable();
        if (LinkTable != null) {
            stmt.bindLong(9, LinkTable);
        }
 
        byte[] LinkCode = entity.getLinkCode();
        if (LinkCode != null) {
            stmt.bindBlob(10, LinkCode);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(11, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(12, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Expense readEntity(Cursor cursor, int offset) {
        Expense entity = new Expense( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // ExpCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ExpDate
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ETCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Description
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // Amount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // CurrCode
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // AmountForeign
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // CurrCodeForeign
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // LinkTable
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // LinkCode
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // Record_Modified
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Expense entity, int offset) {
        entity.setExpCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setExpDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setETCode(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAmount(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCurrCode(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAmountForeign(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCurrCodeForeign(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLinkTable(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLinkCode(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setRecord_Modified(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setRecord_Upload(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Expense entity, long rowId) {
        return entity.getExpCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Expense entity) {
        if(entity != null) {
            return entity.getExpCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
