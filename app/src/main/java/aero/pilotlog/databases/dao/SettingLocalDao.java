package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.SettingLocal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SETTING_LOCAL.
*/
public class SettingLocalDao extends AbstractDao<SettingLocal, Integer> {

    public static final String TABLENAME = "SETTINGLOCAL";

    /**
     * Properties of entity SettingLocal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ConfigCode = new Property(0, Integer.class, "ConfigCode", true, "CONFIGCODE");
        public final static Property Group = new Property(1, String.class, "Group", false, "GROUP");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Data = new Property(3, String.class, "Data", false, "DATA");
    };


    public SettingLocalDao(DaoConfig config) {
        super(config);
    }
    
    public SettingLocalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SETTINGLOCAL' (" + //
                "'CONFIGCODE' INTEGER PRIMARY KEY ," + // 0: ConfigCode
                "'GROUP' TEXT," + // 1: Group
                "'NAME' TEXT," + // 2: Name
                "'DATA' TEXT);"); // 3: Data
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SETTINGLOCAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SettingLocal entity) {
        stmt.clearBindings();
 
        Integer ConfigCode = entity.getConfigCode();
        if (ConfigCode != null) {
            stmt.bindLong(1, ConfigCode);
        }
 
        String Group = entity.getGroup();
        if (Group != null) {
            stmt.bindString(2, Group);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(4, Data);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SettingLocal readEntity(Cursor cursor, int offset) {
        SettingLocal entity = new SettingLocal( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ConfigCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Group
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Data
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SettingLocal entity, int offset) {
        entity.setConfigCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setGroup(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(SettingLocal entity, long rowId) {
        return entity.getConfigCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(SettingLocal entity) {
        if(entity != null) {
            return entity.getConfigCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
