package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZDelayGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZDELAY_GROUP.
*/
public class ZDelayGroupDao extends AbstractDao<ZDelayGroup, Integer> {

    public static final String TABLENAME = "ZDELAYGROUP";

    /**
     * Properties of entity ZDelayGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DelayGroupCode = new Property(0, Integer.class, "DelayGroupCode", true, "DELAYGROUPCODE");
        public final static Property DelayGG = new Property(1, String.class, "DelayGG", false, "DELAYGG");
        public final static Property DelayGroupName = new Property(2, String.class, "DelayGroupName", false, "DELAYGROUPNAME");
        public final static Property Record_Modified = new Property(3, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZDelayGroupDao(DaoConfig config) {
        super(config);
    }
    
    public ZDelayGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZDELAYGROUP' (" + //
                "'DELAYGROUPCODE' INTEGER PRIMARY KEY ," + // 0: DelayGroupCode
                "'DELAYGG' TEXT," + // 1: DelayGG
                "'DELAYGROUP_NAME' TEXT," + // 2: DelayGroupName
                "'RECORD_MODIFIED' INTEGER);"); // 3: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZDELAYGROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZDelayGroup entity) {
        stmt.clearBindings();
 
        Integer DelayGroupCode = entity.getDelayGroupCode();
        if (DelayGroupCode != null) {
            stmt.bindLong(1, DelayGroupCode);
        }
 
        String DelayGG = entity.getDelayGG();
        if (DelayGG != null) {
            stmt.bindString(2, DelayGG);
        }
 
        String DelayGroupName = entity.getDelayGroupName();
        if (DelayGroupName != null) {
            stmt.bindString(3, DelayGroupName);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(4, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZDelayGroup readEntity(Cursor cursor, int offset) {
        ZDelayGroup entity = new ZDelayGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // DelayGroupCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DelayGG
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DelayGroupName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZDelayGroup entity, int offset) {
        entity.setDelayGroupCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDelayGG(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDelayGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecord_Modified(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZDelayGroup entity, long rowId) {
        return entity.getDelayGroupCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZDelayGroup entity) {
        if(entity != null) {
            return entity.getDelayGroupCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
