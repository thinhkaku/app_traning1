package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ValidationRules;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VALIDATION_RULES.
*/
public class ValidationRulesDao extends AbstractDao<ValidationRules, byte[]> {

    public static final String TABLENAME = "VALIDATIONRULES";

    /**
     * Properties of entity ValidationRules.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VCode = new Property(0, byte[].class, "VCode", true, "VCODE");
        public final static Property VTCode = new Property(1, Integer.class, "VTCode", false, "VTCODE");
        public final static Property VDate = new Property(2, String.class, "VDate", false, "VDATE");
        public final static Property VDays = new Property(3, Integer.class, "VDays", false, "VDAYS");
        public final static Property VModel = new Property(4, String.class, "VModel", false, "VMODEL");
        public final static Property VComment = new Property(5, String.class, "VComment", false, "VCOMMENT");
        public final static Property VLanding = new Property(6, Integer.class, "VLanding", false, "VLANDING");
        public final static Property VLandingPeriod = new Property(7, Integer.class, "VLandingPeriod", false, "VLANDINGPERIOD");
        public final static Property VCCT = new Property(8, Integer.class, "VCCT", false, "VCCT");
        public final static Property VExtra = new Property(9, String.class, "VExtra", false, "VEXTRA");
        public final static Property Record_Modified = new Property(10, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(11, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public ValidationRulesDao(DaoConfig config) {
        super(config);
    }
    
    public ValidationRulesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VALIDATIONRULES' (" + //
                "'VCODE' BLOB PRIMARY KEY ," + // 0: VCode
                "'VTCODE' INTEGER," + // 1: VTCode
                "'VDATE' TEXT," + // 2: VDate
                "'VDAYS' INTEGER," + // 3: VDays
                "'VMODEL' TEXT," + // 4: VModel
                "'VCOMMENT' TEXT," + // 5: VComment
                "'VLANDING' INTEGER," + // 6: VLanding
                "'VLANDINGPERIOD' INTEGER," + // 7: VLandingPeriod
                "'VCCT' INTEGER," + // 8: VCCT
                "'VEXTRA' TEXT," + // 9: VExtra
                "'RECORD_MODIFIED' INTEGER," + // 10: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 11: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VALIDATIONRULES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ValidationRules entity) {
        stmt.clearBindings();
 
        byte[] VCode = entity.getVCode();
        if (VCode != null) {
            stmt.bindBlob(1, VCode);
        }
 
        Integer VTCode = entity.getVTCode();
        if (VTCode != null) {
            stmt.bindLong(2, VTCode);
        }
 
        String VDate = entity.getVDate();
        if (VDate != null) {
            stmt.bindString(3, VDate);
        }
 
        Integer VDays = entity.getVDays();
        if (VDays != null) {
            stmt.bindLong(4, VDays);
        }
 
        String VModel = entity.getVModel();
        if (VModel != null) {
            stmt.bindString(5, VModel);
        }
 
        String VComment = entity.getVComment();
        if (VComment != null) {
            stmt.bindString(6, VComment);
        }
 
        Integer VLanding = entity.getVLanding();
        if (VLanding != null) {
            stmt.bindLong(7, VLanding);
        }
 
        Integer VLandingPeriod = entity.getVLandingPeriod();
        if (VLandingPeriod != null) {
            stmt.bindLong(8, VLandingPeriod);
        }
 
        Integer VCCT = entity.getVCCT();
        if (VCCT != null) {
            stmt.bindLong(9, VCCT);
        }
 
        String VExtra = entity.getVExtra();
        if (VExtra != null) {
            stmt.bindString(10, VExtra);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(11, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(12, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ValidationRules readEntity(Cursor cursor, int offset) {
        ValidationRules entity = new ValidationRules( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // VCode
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // VTCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // VDate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // VDays
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VModel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // VComment
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // VLanding
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // VLandingPeriod
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // VCCT
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // VExtra
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // Record_Modified
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ValidationRules entity, int offset) {
        entity.setVCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setVTCode(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setVDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVDays(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setVModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVLanding(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setVLandingPeriod(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVCCT(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setVExtra(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecord_Modified(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setRecord_Upload(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(ValidationRules entity, long rowId) {
        return entity.getVCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(ValidationRules entity) {
        if(entity != null) {
            return entity.getVCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
