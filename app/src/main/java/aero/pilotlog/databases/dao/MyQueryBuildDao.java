package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.MyQueryBuild;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_QUERY_BUILD.
*/
public class MyQueryBuildDao extends AbstractDao<MyQueryBuild, byte[]> {

    public static final String TABLENAME = "MYQUERYBUILD";

    /**
     * Properties of entity MyQueryBuild.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MQBCode = new Property(0, byte[].class, "mQBCode", true, "MQBCODE");
        public final static Property MQCode = new Property(1, byte[].class, "mQCode", false, "MQCODE");
        public final static Property Build1 = new Property(2, String.class, "Build1", false, "BUILD1");
        public final static Property Build2 = new Property(3, Integer.class, "Build2", false, "BUILD2");
        public final static Property Build3 = new Property(4, Integer.class, "Build3", false, "BUILD3");
        public final static Property Build4 = new Property(5, String.class, "Build4", false, "BUILD4");
        public final static Property Record_Modified = new Property(6, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(7, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public MyQueryBuildDao(DaoConfig config) {
        super(config);
    }
    
    public MyQueryBuildDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MYQUERYBUILD' (" + //
                "'MQBCODE' BLOB PRIMARY KEY ," + // 0: mQBCode
                "'MQCODE' BLOB," + // 1: mQCode
                "'BUILD1' TEXT," + // 2: Build1
                "'BUILD2' INTEGER," + // 3: Build2
                "'BUILD3' INTEGER," + // 4: Build3
                "'BUILD4' TEXT," + // 5: Build4
                "'RECORD_MODIFIED' INTEGER," + // 6: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 7: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MYQUERYBUILD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyQueryBuild entity) {
        stmt.clearBindings();
 
        byte[] mQBCode = entity.getMQBCode();
        if (mQBCode != null) {
            stmt.bindBlob(1, mQBCode);
        }
 
        byte[] mQCode = entity.getMQCode();
        if (mQCode != null) {
            stmt.bindBlob(2, mQCode);
        }
 
        String Build1 = entity.getBuild1();
        if (Build1 != null) {
            stmt.bindString(3, Build1);
        }
 
        Integer Build2 = entity.getBuild2();
        if (Build2 != null) {
            stmt.bindLong(4, Build2);
        }
 
        Integer Build3 = entity.getBuild3();
        if (Build3 != null) {
            stmt.bindLong(5, Build3);
        }
 
        String Build4 = entity.getBuild4();
        if (Build4 != null) {
            stmt.bindString(6, Build4);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(7, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(8, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyQueryBuild readEntity(Cursor cursor, int offset) {
        MyQueryBuild entity = new MyQueryBuild( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // mQBCode
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // mQCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Build1
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Build2
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Build3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Build4
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // Record_Modified
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyQueryBuild entity, int offset) {
        entity.setMQBCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setMQCode(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setBuild1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuild2(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBuild3(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBuild4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecord_Modified(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRecord_Upload(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(MyQueryBuild entity, long rowId) {
        return entity.getMQBCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(MyQueryBuild entity) {
        if(entity != null) {
            return entity.getMQBCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
