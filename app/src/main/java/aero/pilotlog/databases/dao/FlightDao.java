package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Flight;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FLIGHT.
*/
public class FlightDao extends AbstractDao<Flight, byte[]> {

    public static final String TABLENAME = "FLIGHT";

    /**
     * Properties of entity Flight.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FlightCode = new Property(0, byte[].class, "FlightCode", true, "FLIGHTCODE");
        public final static Property DateUTC = new Property(1, String.class, "DateUTC", false, "DATEUTC");
        public final static Property DateLOCAL = new Property(2, String.class, "DateLOCAL", false, "DATELOCAL");
        public final static Property DateBASE = new Property(3, String.class, "DateBASE", false, "DATEBASE");
        public final static Property FlightNumber = new Property(4, String.class, "FlightNumber", false, "FLIGHTNUMBER");
        public final static Property Pairing = new Property(5, String.class, "Pairing", false, "PAIRING");
        public final static Property AircraftCode = new Property(6, byte[].class, "AircraftCode", false, "AIRCRAFTCODE");
        public final static Property DepCode = new Property(7, byte[].class, "DepCode", false, "DEPCODE");
        public final static Property ArrCode = new Property(8, byte[].class, "ArrCode", false, "ARRCODE");
        public final static Property DepRwy = new Property(9, String.class, "DepRwy", false, "DEPRWY");
        public final static Property ArrRwy = new Property(10, String.class, "ArrRwy", false, "ARRRWY");
        public final static Property DepTimeUTC = new Property(11, Integer.class, "DepTimeUTC", false, "DEPTIMEUTC");
        public final static Property ArrTimeUTC = new Property(12, Integer.class, "ArrTimeUTC", false, "ARRTIMEUTC");
        public final static Property DepTimeSCHED = new Property(13, Integer.class, "DepTimeSCHED", false, "DEPTIMESCHED");
        public final static Property ArrTimeSCHED = new Property(14, Integer.class, "ArrTimeSCHED", false, "ARRTIMESCHED");
        public final static Property ToTimeUTC = new Property(15, Integer.class, "ToTimeUTC", false, "TOTIMEUTC");
        public final static Property LdgTimeUTC = new Property(16, Integer.class, "LdgTimeUTC", false, "LDGTIMEUTC");
        public final static Property DepOffset = new Property(17, Integer.class, "DepOffset", false, "DEPOFFSET");
        public final static Property ArrOffset = new Property(18, Integer.class, "ArrOffset", false, "ARROFFSET");
        public final static Property BaseOffset = new Property(19, Integer.class, "BaseOffset", false, "BASEOFFSET");
        public final static Property MinTOTAL = new Property(20, Integer.class, "minTOTAL", false, "MINTOTAL");
        public final static Property MinAIR = new Property(21, Integer.class, "minAIR", false, "MINAIR");
        public final static Property MinPIC = new Property(22, Integer.class, "minPIC", false, "MINPIC");
        public final static Property MinPICUS = new Property(23, Integer.class, "minPICUS", false, "MINPICUS");
        public final static Property MinCOP = new Property(24, Integer.class, "minCOP", false, "MINCOP");
        public final static Property MinDUAL = new Property(25, Integer.class, "minDUAL", false, "MINDUAL");
        public final static Property MinINSTR = new Property(26, Integer.class, "minINSTR", false, "MININSTR");
        public final static Property MinEXAM = new Property(27, Integer.class, "minEXAM", false, "MINEXAM");
        public final static Property MinREL = new Property(28, Integer.class, "minREL", false, "MINREL");
        public final static Property MinNIGHT = new Property(29, Integer.class, "minNIGHT", false, "MINNIGHT");
        public final static Property MinXC = new Property(30, Integer.class, "minXC", false, "MINXC");
        public final static Property MinIFR = new Property(31, Integer.class, "minIFR", false, "MINIFR");
        public final static Property MinIMT = new Property(32, Integer.class, "minIMT", false, "MINIMT");
        public final static Property MinSFR = new Property(33, Integer.class, "minSFR", false, "MINSFR");
        public final static Property MinU1 = new Property(34, Integer.class, "minU1", false, "MINU1");
        public final static Property MinU2 = new Property(35, Integer.class, "minU2", false, "MINU2");
        public final static Property MinU3 = new Property(36, Integer.class, "minU3", false, "MINU3");
        public final static Property MinU4 = new Property(37, Integer.class, "minU4", false, "MINU4");
        public final static Property HobbsOut = new Property(38, Long.class, "hobbsOut", false, "HOBBSOUT");
        public final static Property HobbsIn = new Property(39, Long.class, "hobbsIn", false, "HOBBSIN");

        public final static Property ToDay = new Property(40, Integer.class, "ToDay", false, "TODAY");
        public final static Property ToNight = new Property(41, Integer.class, "ToNight", false, "TONIGHT");
        public final static Property LdgDay = new Property(42, Integer.class, "LdgDay", false, "LDGDAY");
        public final static Property LdgNight = new Property(43, Integer.class, "LdgNight", false, "LDGNIGHT");
        public final static Property Holding = new Property(44, Integer.class, "Holding", false, "HOLDING");
        public final static Property LiftSW = new Property(45, Integer.class, "LiftSW", false, "LIFTSW");
        public final static Property Fuel = new Property(46, Integer.class, "Fuel", false, "FUEL");
        public final static Property FuelUsed = new Property(47, Integer.class, "FuelUsed", false, "FUELUSED");
        public final static Property FuelPlanned = new Property(48, Integer.class, "FuelPlanned", false, "FUELPLANNED");
        public final static Property Pax = new Property(49, Integer.class, "Pax", false, "PAX");
        public final static Property DeIce = new Property(50, Boolean.class, "DeIce", false, "DEICE");
        public final static Property UserNum = new Property(51, Integer.class, "UserNum", false, "USERNUM");
        public final static Property UserText = new Property(52, String.class, "UserText", false, "USERTEXT");
        public final static Property UserBool = new Property(53, Boolean.class, "UserBool", false, "USERBOOL");
        public final static Property TagApproach = new Property(54, String.class, "TagApproach", false, "TAGAPPROACH");
        public final static Property TagLaunch = new Property(55, String.class, "TagLaunch", false, "TAGLAUNCH");
        public final static Property TagOps = new Property(56, String.class, "TagOps", false, "TAGOPS");
        public final static Property TagDelay = new Property(57, String.class, "TagDelay", false, "TAGDELAY");
        public final static Property PF = new Property(58, Boolean.class, "PF", false, "PF");
        public final static Property P1Code = new Property(59, byte[].class, "P1Code", false, "P1CODE");
        public final static Property P2Code = new Property(60, byte[].class, "P2Code", false, "P2CODE");
        public final static Property P3Code = new Property(61, byte[].class, "P3Code", false, "P3CODE");
        public final static Property P4Code = new Property(62, byte[].class, "P4Code", false, "P4CODE");
        public final static Property CrewList = new Property(63, String.class, "CrewList", false, "CREWLIST");
        public final static Property Training = new Property(64, String.class, "Training", false, "TRAINING");
        public final static Property Remarks = new Property(65, String.class, "Remarks", false, "REMARKS");
        public final static Property Report = new Property(66, String.class, "Report", false, "REPORT");
        public final static Property SignBox = new Property(67, Integer.class, "SignBox", false, "SIGNBOX");
        public final static Property NextPage = new Property(68, Boolean.class, "NextPage", false, "NEXTPAGE");
        public final static Property NextSummary = new Property(69, Boolean.class, "NextSummary", false, "NEXTSUMMARY");
        public final static Property ToEdit = new Property(70, Boolean.class, "ToEdit", false, "TOEDIT");
        public final static Property Record_Modified = new Property(71, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(72, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public FlightDao(DaoConfig config) {
        super(config);
    }
    
    public FlightDao(DaoConfig config, aero.pilotlog.databases.dao.DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FLIGHT' (" + //
                "'FLIGHTCODE' BLOB PRIMARY KEY ," + // 0: FlightCode
                "'DATEUTC' TEXT," + // 1: DateUTC
                "'DATELOCAL' TEXT," + // 2: DateLOCAL
                "'DATEBASE' TEXT," + // 3: DateBASE
                "'FLIGHTNUMBER' TEXT," + // 4: FlightNumber
                "'PAIRING' TEXT," + // 5: Pairing
                "'AIRCRAFTCODE' BLOB," + // 6: AircraftCode
                "'DEPCODE' BLOB," + // 7: DepCode
                "'ARRCODE' BLOB," + // 8: ArrCode
                "'DEPRWY' TEXT," + // 9: DepRwy
                "'ARRRWY' TEXT," + // 10: ArrRwy
                "'DEPTIMEUTC' INTEGER," + // 11: DepTimeUTC
                "'ARRTIMEUTC' INTEGER," + // 12: ArrTimeUTC
                "'DEPTIMESCHED' INTEGER," + // 13: DepTimeSCHED
                "'ARRTIMESCHED' INTEGER," + // 14: ArrTimeSCHED
                "'TOTIMEUTC' INTEGER," + // 15: ToTimeUTC
                "'LDGTIMEUTC' INTEGER," + // 16: LdgTimeUTC
                "'DEPOFFSET' INTEGER," + // 17: DepOffset
                "'ARROFFSET' INTEGER," + // 18: ArrOffset
                "'BASEOFFSET' INTEGER," + // 19: BaseOffset
                "'MINTOTAL' INTEGER," + // 20: minTOTAL
                "'MINAIR' INTEGER," + // 21: minAIR
                "'MINPIC' INTEGER," + // 22: minPIC
                "'MINPICUS' INTEGER," + // 23: minPICUS
                "'MINCOP' INTEGER," + // 24: minCOP
                "'MINDUAL' INTEGER," + // 25: minDUAL
                "'MININSTR' INTEGER," + // 26: minINSTR
                "'MINEXAM' INTEGER," + // 27: minEXAM
                "'MINREL' INTEGER," + // 28: minREL
                "'MINNIGHT' INTEGER," + // 29: minNIGHT
                "'MINXC' INTEGER," + // 30: minXC
                "'MINIFR' INTEGER," + // 31: minIFR
                "'MINIMT' INTEGER," + // 32: minIMT
                "'MINSFR' INTEGER," + // 33: minSFR
                "'MINU1' INTEGER," + // 34: minU1
                "'MINU2' INTEGER," + // 35: minU2
                "'MINU3' INTEGER," + // 36: minU3
                "'MINU4' INTEGER," + // 37: minU4
                "'HOBBSOUT' INTEGER," + // 37: minU4
                "'HOBBSIN' INTEGER," + // 37: minU4
                "'TODAY' INTEGER," + // 38: ToDay
                "'TONIGHT' INTEGER," + // 39: ToNight
                "'LDGDAY' INTEGER," + // 40: LdgDay
                "'LDGNIGHT' INTEGER," + // 41: LdgNight
                "'HOLDING' INTEGER," + // 42: Holding
                "'LIFTSW' INTEGER," + // 43: LiftSW
                "'FUEL' INTEGER," + // 44: Fuel
                "'FUELUSED' INTEGER," + // 45: FuelUsed
                "'FUELPLANNED' INTEGER," + // 46: FuelPlanned
                "'PAX' INTEGER," + // 47: Pax
                "'DEICE' INTEGER," + // 48: DeIce
                "'USERNUM' INTEGER," + // 49: UserNum
                "'USERTEXT' TEXT," + // 50: UserText
                "'USERBOOL' INTEGER," + // 51: UserBool
                "'TAGAPPROACH' TEXT," + // 52: TagApproach
                "'TAGLAUNCH' TEXT," + // 53: TagLaunch
                "'TAGOPS' TEXT," + // 54: TagOps
                "'TAGDELAY' TEXT," + // 55: TagDelay
                "'PF' INTEGER," + // 56: PF
                "'P1CODE' BLOB," + // 57: P1Code
                "'P2CODE' BLOB," + // 58: P2Code
                "'P3CODE' BLOB," + // 59: P3Code
                "'P4CODE' BLOB," + // 60: P4Code
                "'CREWLIST' TEXT," + // 61: CrewList
                "'TRAINING' TEXT," + // 62: Training
                "'REMARKS' TEXT," + // 63: Remarks
                "'REPORT' TEXT," + // 64: Report
                "'SIGNBOX' INTEGER," + // 65: SignBox
                "'NEXTPAGE' INTEGER," + // 66: NextPage
                "'NEXTSUMMARY' INTEGER," + // 67: NextSummary
                "'TOEDIT' INTEGER," + // 68: ToEdit
                "'RECORD_MODIFIED' INTEGER," + // 69: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 70: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLIGHT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Flight entity) {
        stmt.clearBindings();
 
        byte[] FlightCode = entity.getFlightCode();
        if (FlightCode != null) {
            stmt.bindBlob(1, FlightCode);
        }
 
        String DateUTC = entity.getDateUTC();
        if (DateUTC != null) {
            stmt.bindString(2, DateUTC);
        }
 
        String DateLOCAL = entity.getDateLOCAL();
        if (DateLOCAL != null) {
            stmt.bindString(3, DateLOCAL);
        }
 
        String DateBASE = entity.getDateBASE();
        if (DateBASE != null) {
            stmt.bindString(4, DateBASE);
        }
 
        String FlightNumber = entity.getFlightNumber();
        if (FlightNumber != null) {
            stmt.bindString(5, FlightNumber);
        }
 
        String Pairing = entity.getPairing();
        if (Pairing != null) {
            stmt.bindString(6, Pairing);
        }
 
        byte[] AircraftCode = entity.getAircraftCode();
        if (AircraftCode != null) {
            stmt.bindBlob(7, AircraftCode);
        }
 
        byte[] DepCode = entity.getDepCode();
        if (DepCode != null) {
            stmt.bindBlob(8, DepCode);
        }
 
        byte[] ArrCode = entity.getArrCode();
        if (ArrCode != null) {
            stmt.bindBlob(9, ArrCode);
        }
 
        String DepRwy = entity.getDepRwy();
        if (DepRwy != null) {
            stmt.bindString(10, DepRwy);
        }
 
        String ArrRwy = entity.getArrRwy();
        if (ArrRwy != null) {
            stmt.bindString(11, ArrRwy);
        }
 
        Integer DepTimeUTC = entity.getDepTimeUTC();
        if (DepTimeUTC != null) {
            stmt.bindLong(12, DepTimeUTC);
        }
 
        Integer ArrTimeUTC = entity.getArrTimeUTC();
        if (ArrTimeUTC != null) {
            stmt.bindLong(13, ArrTimeUTC);
        }
 
        Integer DepTimeSCHED = entity.getDepTimeSCHED();
        if (DepTimeSCHED != null) {
            stmt.bindLong(14, DepTimeSCHED);
        }
 
        Integer ArrTimeSCHED = entity.getArrTimeSCHED();
        if (ArrTimeSCHED != null) {
            stmt.bindLong(15, ArrTimeSCHED);
        }
 
        Integer ToTimeUTC = entity.getToTimeUTC();
        if (ToTimeUTC != null) {
            stmt.bindLong(16, ToTimeUTC);
        }
 
        Integer LdgTimeUTC = entity.getLdgTimeUTC();
        if (LdgTimeUTC != null) {
            stmt.bindLong(17, LdgTimeUTC);
        }
 
        Integer DepOffset = entity.getDepOffset();
        if (DepOffset != null) {
            stmt.bindLong(18, DepOffset);
        }
 
        Integer ArrOffset = entity.getArrOffset();
        if (ArrOffset != null) {
            stmt.bindLong(19, ArrOffset);
        }
 
        Integer BaseOffset = entity.getBaseOffset();
        if (BaseOffset != null) {
            stmt.bindLong(20, BaseOffset);
        }
 
        Integer minTOTAL = entity.getMinTOTAL();
        if (minTOTAL != null) {
            stmt.bindLong(21, minTOTAL);
        }
 
        Integer minAIR = entity.getMinAIR();
        if (minAIR != null) {
            stmt.bindLong(22, minAIR);
        }
 
        Integer minPIC = entity.getMinPIC();
        if (minPIC != null) {
            stmt.bindLong(23, minPIC);
        }
 
        Integer minPICUS = entity.getMinPICUS();
        if (minPICUS != null) {
            stmt.bindLong(24, minPICUS);
        }
 
        Integer minCOP = entity.getMinCOP();
        if (minCOP != null) {
            stmt.bindLong(25, minCOP);
        }
 
        Integer minDUAL = entity.getMinDUAL();
        if (minDUAL != null) {
            stmt.bindLong(26, minDUAL);
        }
 
        Integer minINSTR = entity.getMinINSTR();
        if (minINSTR != null) {
            stmt.bindLong(27, minINSTR);
        }
 
        Integer minEXAM = entity.getMinEXAM();
        if (minEXAM != null) {
            stmt.bindLong(28, minEXAM);
        }
 
        Integer minREL = entity.getMinREL();
        if (minREL != null) {
            stmt.bindLong(29, minREL);
        }
 
        Integer minNIGHT = entity.getMinNIGHT();
        if (minNIGHT != null) {
            stmt.bindLong(30, minNIGHT);
        }
 
        Integer minXC = entity.getMinXC();
        if (minXC != null) {
            stmt.bindLong(31, minXC);
        }
 
        Integer minIFR = entity.getMinIFR();
        if (minIFR != null) {
            stmt.bindLong(32, minIFR);
        }
 
        Integer minIMT = entity.getMinIMT();
        if (minIMT != null) {
            stmt.bindLong(33, minIMT);
        }
 
        Integer minSFR = entity.getMinSFR();
        if (minSFR != null) {
            stmt.bindLong(34, minSFR);
        }
 
        Integer minU1 = entity.getMinU1();
        if (minU1 != null) {
            stmt.bindLong(35, minU1);
        }
 
        Integer minU2 = entity.getMinU2();
        if (minU2 != null) {
            stmt.bindLong(36, minU2);
        }
 
        Integer minU3 = entity.getMinU3();
        if (minU3 != null) {
            stmt.bindLong(37, minU3);
        }
 
        Integer minU4 = entity.getMinU4();
        if (minU4 != null) {
            stmt.bindLong(38, minU4);
        }
        Long hobbsOut = entity.getHobbsOut();
        if (hobbsOut != null) {
            stmt.bindLong(39, hobbsOut);
        }
        Long hobbsIn = entity.getHobbsIn();
        if (hobbsIn != null) {
            stmt.bindLong(40, hobbsIn);
        }
 
        Integer ToDay = entity.getToDay();
        if (ToDay != null) {
            stmt.bindLong(41, ToDay);
        }
 
        Integer ToNight = entity.getToNight();
        if (ToNight != null) {
            stmt.bindLong(42, ToNight);
        }
 
        Integer LdgDay = entity.getLdgDay();
        if (LdgDay != null) {
            stmt.bindLong(43, LdgDay);
        }
 
        Integer LdgNight = entity.getLdgNight();
        if (LdgNight != null) {
            stmt.bindLong(44, LdgNight);
        }
 
        Integer Holding = entity.getHolding();
        if (Holding != null) {
            stmt.bindLong(45, Holding);
        }
 
        Integer LiftSW = entity.getLiftSW();
        if (LiftSW != null) {
            stmt.bindLong(46, LiftSW);
        }
 
        Integer Fuel = entity.getFuel();
        if (Fuel != null) {
            stmt.bindLong(47, Fuel);
        }
 
        Integer FuelUsed = entity.getFuelUsed();
        if (FuelUsed != null) {
            stmt.bindLong(48, FuelUsed);
        }
 
        Integer FuelPlanned = entity.getFuelPlanned();
        if (FuelPlanned != null) {
            stmt.bindLong(49, FuelPlanned);
        }
 
        Integer Pax = entity.getPax();
        if (Pax != null) {
            stmt.bindLong(50, Pax);
        }
 
        Boolean DeIce = entity.getDeIce();
        if (DeIce != null) {
            stmt.bindLong(51, DeIce ? 1l: 0l);
        }
 
        Integer UserNum = entity.getUserNum();
        if (UserNum != null) {
            stmt.bindLong(52, UserNum);
        }
 
        String UserText = entity.getUserText();
        if (UserText != null) {
            stmt.bindString(53, UserText);
        }
 
        Boolean UserBool = entity.getUserBool();
        if (UserBool != null) {
            stmt.bindLong(54, UserBool ? 1l: 0l);
        }
 
        String TagApproach = entity.getTagApproach();
        if (TagApproach != null) {
            stmt.bindString(55, TagApproach);
        }
 
        String TagLaunch = entity.getTagLaunch();
        if (TagLaunch != null) {
            stmt.bindString(56, TagLaunch);
        }
 
        String TagOps = entity.getTagOps();
        if (TagOps != null) {
            stmt.bindString(57, TagOps);
        }
 
        String TagDelay = entity.getTagDelay();
        if (TagDelay != null) {
            stmt.bindString(58, TagDelay);
        }
 
        Boolean PF = entity.getPF();
        if (PF != null) {
            stmt.bindLong(59, PF ? 1l: 0l);
        }
 
        byte[] P1Code = entity.getP1Code();
        if (P1Code != null) {
            stmt.bindBlob(60, P1Code);
        }
 
        byte[] P2Code = entity.getP2Code();
        if (P2Code != null) {
            stmt.bindBlob(61, P2Code);
        }
 
        byte[] P3Code = entity.getP3Code();
        if (P3Code != null) {
            stmt.bindBlob(62, P3Code);
        }
 
        byte[] P4Code = entity.getP4Code();
        if (P4Code != null) {
            stmt.bindBlob(63, P4Code);
        }
 
        String CrewList = entity.getCrewList();
        if (CrewList != null) {
            stmt.bindString(64, CrewList);
        }
 
        String Training = entity.getTraining();
        if (Training != null) {
            stmt.bindString(65, Training);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(66, Remarks);
        }
 
        String Report = entity.getReport();
        if (Report != null) {
            stmt.bindString(67, Report);
        }
 
        Integer SignBox = entity.getSignBox();
        if (SignBox != null) {
            stmt.bindLong(68, SignBox);
        }
 
        Boolean NextPage = entity.getNextPage();
        if (NextPage != null) {
            stmt.bindLong(69, NextPage ? 1l: 0l);
        }
 
        Boolean NextSummary = entity.getNextSummary();
        if (NextSummary != null) {
            stmt.bindLong(70, NextSummary ? 1l: 0l);
        }
 
        Boolean ToEdit = entity.getToEdit();
        if (ToEdit != null) {
            stmt.bindLong(71, ToEdit ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(72, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(73, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Flight readEntity(Cursor cursor, int offset) {
        Flight entity = new Flight( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // FlightCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DateUTC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DateLOCAL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DateBASE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FlightNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Pairing
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // AircraftCode
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // DepCode
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // ArrCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DepRwy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ArrRwy
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // DepTimeUTC
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // ArrTimeUTC
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // DepTimeSCHED
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // ArrTimeSCHED
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // ToTimeUTC
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // LdgTimeUTC
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // DepOffset
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // ArrOffset
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // BaseOffset
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // minTOTAL
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // minAIR
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // minPIC
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // minPICUS
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // minCOP
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // minDUAL
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // minINSTR
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // minEXAM
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // minREL
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // minNIGHT
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // minXC
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // minIFR
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // minIMT
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // minSFR
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // minU1
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // minU2
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // minU3
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // minU4

                cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38), // minU4
                cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39), // minU4

            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // ToDay
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // ToNight
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // LdgDay
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // LdgNight
            cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44), // Holding
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // LiftSW
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // Fuel
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // FuelUsed
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // FuelPlanned
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // Pax
            cursor.isNull(offset + 50) ? null : cursor.getShort(offset + 50) != 0, // DeIce
            cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51), // UserNum
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // UserText
            cursor.isNull(offset + 53) ? null : cursor.getShort(offset + 53) != 0, // UserBool
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // TagApproach
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // TagLaunch
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // TagOps
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // TagDelay
            cursor.isNull(offset + 58) ? null : cursor.getShort(offset + 58) != 0, // PF
            cursor.isNull(offset + 59) ? null : cursor.getBlob(offset + 59), // P1Code
            cursor.isNull(offset + 60) ? null : cursor.getBlob(offset + 60), // P2Code
            cursor.isNull(offset + 61) ? null : cursor.getBlob(offset + 61), // P3Code
            cursor.isNull(offset + 62) ? null : cursor.getBlob(offset + 62), // P4Code
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // CrewList
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // Training
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // Remarks
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // Report
            cursor.isNull(offset + 67) ? null : cursor.getInt(offset + 67), // SignBox
            cursor.isNull(offset + 68) ? null : cursor.getShort(offset + 68) != 0, // NextPage
            cursor.isNull(offset + 69) ? null : cursor.getShort(offset + 69) != 0, // NextSummary
            cursor.isNull(offset + 70) ? null : cursor.getShort(offset + 70) != 0, // ToEdit
            cursor.isNull(offset + 71) ? null : cursor.getLong(offset + 71), // Record_Modified
            cursor.isNull(offset + 72) ? null : cursor.getShort(offset + 72) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Flight entity, int offset) {
        entity.setFlightCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setDateUTC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateLOCAL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateBASE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlightNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPairing(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAircraftCode(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setDepCode(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setArrCode(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setDepRwy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArrRwy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDepTimeUTC(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setArrTimeUTC(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDepTimeSCHED(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setArrTimeSCHED(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setToTimeUTC(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setLdgTimeUTC(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setDepOffset(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setArrOffset(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setBaseOffset(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setMinTOTAL(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setMinAIR(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setMinPIC(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setMinPICUS(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setMinCOP(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setMinDUAL(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setMinINSTR(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setMinEXAM(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setMinREL(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setMinNIGHT(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setMinXC(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setMinIFR(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setMinIMT(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setMinSFR(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setMinU1(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setMinU2(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setMinU3(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setMinU4(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));

        entity.setHobbsOut(cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38));
        entity.setHobbsIn(cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39));


        entity.setToDay(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setToNight(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setLdgDay(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setLdgNight(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setHolding(cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44));
        entity.setLiftSW(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setFuel(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setFuelUsed(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
        entity.setFuelPlanned(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setPax(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setDeIce(cursor.isNull(offset + 50) ? null : cursor.getShort(offset + 50) != 0);
        entity.setUserNum(cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51));
        entity.setUserText(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setUserBool(cursor.isNull(offset + 53) ? null : cursor.getShort(offset + 53) != 0);
        entity.setTagApproach(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setTagLaunch(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setTagOps(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setTagDelay(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setPF(cursor.isNull(offset + 58) ? null : cursor.getShort(offset + 58) != 0);
        entity.setP1Code(cursor.isNull(offset + 59) ? null : cursor.getBlob(offset + 59));
        entity.setP2Code(cursor.isNull(offset + 60) ? null : cursor.getBlob(offset + 60));
        entity.setP3Code(cursor.isNull(offset + 61) ? null : cursor.getBlob(offset + 61));
        entity.setP4Code(cursor.isNull(offset + 62) ? null : cursor.getBlob(offset + 62));
        entity.setCrewList(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setTraining(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setRemarks(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setReport(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setSignBox(cursor.isNull(offset + 67) ? null : cursor.getInt(offset + 67));
        entity.setNextPage(cursor.isNull(offset + 68) ? null : cursor.getShort(offset + 68) != 0);
        entity.setNextSummary(cursor.isNull(offset + 69) ? null : cursor.getShort(offset + 69) != 0);
        entity.setToEdit(cursor.isNull(offset + 70) ? null : cursor.getShort(offset + 70) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 71) ? null : cursor.getLong(offset + 71));
        entity.setRecord_Upload(cursor.isNull(offset + 72) ? null : cursor.getShort(offset + 72) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Flight entity, long rowId) {
        return entity.getFlightCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Flight entity) {
        if(entity != null) {
            return entity.getFlightCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
