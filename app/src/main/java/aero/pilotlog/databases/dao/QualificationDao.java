package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Qualification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUALIFICATION.
*/
public class QualificationDao extends AbstractDao<Qualification, byte[]> {

    public static final String TABLENAME = "QUALIFICATION";

    /**
     * Properties of entity Qualification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property QCode = new Property(0, byte[].class, "QCode", true, "QCODE");
        public final static Property QTypeCode = new Property(1, Integer.class, "QTypeCode", false, "QTYPECODE");
        public final static Property Validity = new Property(2, Integer.class, "Validity", false, "VALIDITY");
        public final static Property DateIssued = new Property(3, String.class, "DateIssued", false, "DATEISSUED");
        public final static Property DateValid = new Property(4, String.class, "DateValid", false, "DATEVALID");
        public final static Property MinimumQty = new Property(5, Integer.class, "MinimumQty", false, "MINIMUMQTY");
        public final static Property MinimumPeriod = new Property(6, Integer.class, "MinimumPeriod", false, "MINIMUMPERIOD");
        public final static Property RefModel = new Property(7, String.class, "RefModel", false, "REFMODEL");
        public final static Property RefAirfield = new Property(8, byte[].class, "RefAirfield", false, "REFAIRFIELD");
        public final static Property RefExtra = new Property(9, Integer.class, "RefExtra", false, "REFEXTRA");
        public final static Property NotifyDays = new Property(10, Integer.class, "NotifyDays", false, "NOTIFYDAYS");
        public final static Property NotifyComment = new Property(11, String.class, "NotifyComment", false, "NOTIFYCOMMENT");
        public final static Property Record_Modified = new Property(12, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(13, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public QualificationDao(DaoConfig config) {
        super(config);
    }
    
    public QualificationDao(DaoConfig config, aero.pilotlog.databases.dao.DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUALIFICATION' (" + //
                "'QCODE' BLOB PRIMARY KEY ," + // 0: QCode
                "'QTYPECODE' INTEGER," + // 1: QTypeCode
                "'VALIDITY' INTEGER," + // 2: Validity
                "'DATEISSUED' TEXT," + // 3: DateIssued
                "'DATEVALID' TEXT," + // 4: DateValid
                "'MINIMUMQTY' INTEGER," + // 5: MinimumQty
                "'MINIMUMPERIOD' INTEGER," + // 6: MinimumPeriod
                "'REFMODEL' TEXT," + // 7: RefModel
                "'REFAIRFIELD' BLOB," + // 8: RefAirfield
                "'REFEXTRA' INTEGER," + // 9: RefExtra
                "'NOTIFYDAYS' INTEGER," + // 10: NotifyDays
                "'NOTIFYCOMMENT' TEXT," + // 11: NotifyComment
                "'RECORD_MODIFIED' INTEGER," + // 12: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 13: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUALIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Qualification entity) {
        stmt.clearBindings();
 
        byte[] QCode = entity.getQCode();
        if (QCode != null) {
            stmt.bindBlob(1, QCode);
        }
 
        Integer QTypeCode = entity.getQTypeCode();
        if (QTypeCode != null) {
            stmt.bindLong(2, QTypeCode);
        }
 
        Integer Validity = entity.getValidity();
        if (Validity != null) {
            stmt.bindLong(3, Validity);
        }
 
        String DateIssued = entity.getDateIssued();
        if (DateIssued != null) {
            stmt.bindString(4, DateIssued);
        }
 
        String DateValid = entity.getDateValid();
        if (DateValid != null) {
            stmt.bindString(5, DateValid);
        }
 
        Integer MinimumQty = entity.getMinimumQty();
        if (MinimumQty != null) {
            stmt.bindLong(6, MinimumQty);
        }
 
        Integer MinimumPeriod = entity.getMinimumPeriod();
        if (MinimumPeriod != null) {
            stmt.bindLong(7, MinimumPeriod);
        }
 
        String RefModel = entity.getRefModel();
        if (RefModel != null) {
            stmt.bindString(8, RefModel);
        }
 
        byte[] RefAirfield = entity.getRefAirfield();
        if (RefAirfield != null) {
            stmt.bindBlob(9, RefAirfield);
        }
 
        Integer RefExtra = entity.getRefExtra();
        if (RefExtra != null) {
            stmt.bindLong(10, RefExtra);
        }
 
        Integer NotifyDays = entity.getNotifyDays();
        if (NotifyDays != null) {
            stmt.bindLong(11, NotifyDays);
        }
 
        String NotifyComment = entity.getNotifyComment();
        if (NotifyComment != null) {
            stmt.bindString(12, NotifyComment);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(13, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(14, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Qualification readEntity(Cursor cursor, int offset) {
        Qualification entity = new Qualification( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // QCode
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // QTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Validity
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DateIssued
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DateValid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // MinimumQty
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // MinimumPeriod
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // RefModel
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // RefAirfield
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // RefExtra
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // NotifyDays
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // NotifyComment
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // Record_Modified
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Qualification entity, int offset) {
        entity.setQCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setQTypeCode(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setValidity(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDateIssued(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateValid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinimumQty(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMinimumPeriod(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRefModel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRefAirfield(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setRefExtra(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setNotifyDays(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setNotifyComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRecord_Modified(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setRecord_Upload(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Qualification entity, long rowId) {
        return entity.getQCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Qualification entity) {
        if(entity != null) {
            return entity.getQCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
