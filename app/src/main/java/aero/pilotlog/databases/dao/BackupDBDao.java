package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.BackupDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BACKUP_DB.
*/
public class BackupDBDao extends AbstractDao<BackupDB, byte[]> {

    public static final String TABLENAME = "BACKUPDB";

    /**
     * Properties of entity BackupDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BackupCode = new Property(0, byte[].class, "BackupCode", true, "BACKUPCODE");
        public final static Property DateTime = new Property(1, String.class, "DateTime", false, "DATETIME");
        public final static Property FlightRecords = new Property(2, Integer.class, "FlightRecords", false, "FLIGHTRECORDS");
        public final static Property DbURL = new Property(3, String.class, "dbURL", false, "DBURL");
        public final static Property Record_Modified = new Property(4, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(5, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public BackupDBDao(DaoConfig config) {
        super(config);
    }
    
    public BackupDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BACKUPDB' (" + //
                "'BACKUPCODE' BLOB PRIMARY KEY ," + // 0: BackupCode
                "'DATETIME' TEXT," + // 1: DateTime
                "'FLIGHTRECORDS' INTEGER," + // 2: FlightRecords
                "'DB_URL' TEXT," + // 3: dbURL
                "'RECORD_MODIFIED' INTEGER," + // 4: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 5: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BACKUPDB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BackupDB entity) {
        stmt.clearBindings();
 
        byte[] BackupCode = entity.getBackupCode();
        if (BackupCode != null) {
            stmt.bindBlob(1, BackupCode);
        }
 
        String DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindString(2, DateTime);
        }
 
        Integer FlightRecords = entity.getFlightRecords();
        if (FlightRecords != null) {
            stmt.bindLong(3, FlightRecords);
        }
 
        String dbURL = entity.getDbURL();
        if (dbURL != null) {
            stmt.bindString(4, dbURL);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(5, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(6, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BackupDB readEntity(Cursor cursor, int offset) {
        BackupDB entity = new BackupDB( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // BackupCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DateTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // FlightRecords
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dbURL
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // Record_Modified
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BackupDB entity, int offset) {
        entity.setBackupCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setDateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlightRecords(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDbURL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecord_Modified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRecord_Upload(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(BackupDB entity, long rowId) {
        return entity.getBackupCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(BackupDB entity) {
        if(entity != null) {
            return entity.getBackupCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
