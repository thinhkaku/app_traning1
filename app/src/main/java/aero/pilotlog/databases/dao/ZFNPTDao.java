package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZFNPT;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZFNPT.
*/
public class ZFNPTDao extends AbstractDao<ZFNPT, Integer> {

    public static final String TABLENAME = "ZFNPT";

    /**
     * Properties of entity ZFNPT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FnptCode = new Property(0, Integer.class, "FnptCode", true, "FNPTCODE");
        public final static Property FnptShort = new Property(1, String.class, "FnptShort", false, "FNPTSHORT");
        public final static Property FnptLong = new Property(2, String.class, "FnptLong", false, "FNPTLONG");
        public final static Property Drone = new Property(3, Boolean.class, "Drone", false, "DRONE");
        public final static Property Record_Modified = new Property(4, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZFNPTDao(DaoConfig config) {
        super(config);
    }
    
    public ZFNPTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZFNPT' (" + //
                "'FNPTCODE' INTEGER PRIMARY KEY ," + // 0: FnptCode
                "'FNPTSHORT' TEXT," + // 1: FnptShort
                "'FNPTLONG' TEXT," + // 2: FnptLong
                "'DRONE' INTEGER," + // 3: Drone
                "'RECORD_MODIFIED' INTEGER);"); // 4: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZFNPT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZFNPT entity) {
        stmt.clearBindings();
 
        Integer FnptCode = entity.getFnptCode();
        if (FnptCode != null) {
            stmt.bindLong(1, FnptCode);
        }
 
        String FnptShort = entity.getFnptShort();
        if (FnptShort != null) {
            stmt.bindString(2, FnptShort);
        }
 
        String FnptLong = entity.getFnptLong();
        if (FnptLong != null) {
            stmt.bindString(3, FnptLong);
        }
 
        Boolean Drone = entity.getDrone();
        if (Drone != null) {
            stmt.bindLong(4, Drone ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(5, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZFNPT readEntity(Cursor cursor, int offset) {
        ZFNPT entity = new ZFNPT( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // FnptCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FnptShort
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FnptLong
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // Drone
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZFNPT entity, int offset) {
        entity.setFnptCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setFnptShort(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFnptLong(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrone(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZFNPT entity, long rowId) {
        return entity.getFnptCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZFNPT entity) {
        if(entity != null) {
            return entity.getFnptCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
