package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZQualification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZQUALIFICATION.
*/
public class ZQualificationDao extends AbstractDao<ZQualification, Integer> {

    public static final String TABLENAME = "ZQUALIFICATION";

    /**
     * Properties of entity ZQualification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property QTypeCode = new Property(0, Integer.class, "QTypeCode", true, "QTYPECODE");
        public final static Property QTypeLong = new Property(1, String.class, "QTypeLong", false, "QTYPELONG");
        public final static Property IsCertificate = new Property(2, Boolean.class, "IsCertificate", false, "ISCERTIFICATE");
        public final static Property MinimumWord1 = new Property(3, String.class, "MinimumWord1", false, "MINIMUMWORD1");
        public final static Property MinimumWord2 = new Property(4, String.class, "MinimumWord2", false, "MINIMUMWORD2");
        public final static Property ReqModel = new Property(5, Boolean.class, "ReqModel", false, "REQMODEL");
        public final static Property ReqAirfield = new Property(6, Boolean.class, "ReqAirfield", false, "REQAIRFIELD");
        public final static Property ReqExtra = new Property(7, Boolean.class, "ReqExtra", false, "REQEXTRA");
        public final static Property Record_Modified = new Property(8, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZQualificationDao(DaoConfig config) {
        super(config);
    }
    
    public ZQualificationDao(DaoConfig config, aero.pilotlog.databases.dao.DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZQUALIFICATION' (" + //
                "'QTYPECODE' INTEGER PRIMARY KEY ," + // 0: QTypeCode
                "'QTYPELONG' TEXT," + // 1: QTypeLong
                "'ISCERTIFICATE' INTEGER," + // 2: IsCertificate
                "'MINIMUMWORD1' TEXT," + // 3: MinimumWord1
                "'MINIMUMWORD2' TEXT," + // 4: MinimumWord2
                "'REQMODEL' INTEGER," + // 5: ReqModel
                "'REQAIRFIELD' INTEGER," + // 6: ReqAirfield
                "'REQEXTRA' INTEGER," + // 7: ReqExtra
                "'RECORD_MODIFIED' INTEGER);"); // 8: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZQUALIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZQualification entity) {
        stmt.clearBindings();
 
        Integer QTypeCode = entity.getQTypeCode();
        if (QTypeCode != null) {
            stmt.bindLong(1, QTypeCode);
        }
 
        String QTypeLong = entity.getQTypeLong();
        if (QTypeLong != null) {
            stmt.bindString(2, QTypeLong);
        }
 
        Boolean IsCertificate = entity.getIsCertificate();
        if (IsCertificate != null) {
            stmt.bindLong(3, IsCertificate ? 1l: 0l);
        }
 
        String MinimumWord1 = entity.getMinimumWord1();
        if (MinimumWord1 != null) {
            stmt.bindString(4, MinimumWord1);
        }
 
        String MinimumWord2 = entity.getMinimumWord2();
        if (MinimumWord2 != null) {
            stmt.bindString(5, MinimumWord2);
        }
 
        Boolean ReqModel = entity.getReqModel();
        if (ReqModel != null) {
            stmt.bindLong(6, ReqModel ? 1l: 0l);
        }
 
        Boolean ReqAirfield = entity.getReqAirfield();
        if (ReqAirfield != null) {
            stmt.bindLong(7, ReqAirfield ? 1l: 0l);
        }
 
        Boolean ReqExtra = entity.getReqExtra();
        if (ReqExtra != null) {
            stmt.bindLong(8, ReqExtra ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(9, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZQualification readEntity(Cursor cursor, int offset) {
        ZQualification entity = new ZQualification( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // QTypeCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // QTypeLong
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // IsCertificate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MinimumWord1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MinimumWord2
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // ReqModel
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // ReqAirfield
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // ReqExtra
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZQualification entity, int offset) {
        entity.setQTypeCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setQTypeLong(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsCertificate(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setMinimumWord1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMinimumWord2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReqModel(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setReqAirfield(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setReqExtra(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZQualification entity, long rowId) {
        return entity.getQTypeCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZQualification entity) {
        if(entity != null) {
            return entity.getQTypeCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
