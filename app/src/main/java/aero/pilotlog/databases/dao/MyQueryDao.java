package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.MyQuery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_QUERY.
*/
public class MyQueryDao extends AbstractDao<MyQuery, byte[]> {

    public static final String TABLENAME = "MYQUERY";

    /**
     * Properties of entity MyQuery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MQCode = new Property(0, byte[].class, "mQCode", true, "MQCODE");
        public final static Property ShortName = new Property(1, String.class, "ShortName", false, "SHORTNAME");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property QuickView = new Property(3, Boolean.class, "QuickView", false, "QUICKVIEW");
        public final static Property Record_Modified = new Property(4, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(5, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public MyQueryDao(DaoConfig config) {
        super(config);
    }
    
    public MyQueryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MYQUERY' (" + //
                "'MQCODE' BLOB PRIMARY KEY ," + // 0: mQCode
                "'SHORTNAME' TEXT," + // 1: ShortName
                "'NAME' TEXT," + // 2: Name
                "'QUICKVIEW' INTEGER," + // 3: QuickView
                "'RECORD_MODIFIED' INTEGER," + // 4: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 5: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MYQUERY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyQuery entity) {
        stmt.clearBindings();
 
        byte[] mQCode = entity.getMQCode();
        if (mQCode != null) {
            stmt.bindBlob(1, mQCode);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(2, ShortName);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        Boolean QuickView = entity.getQuickView();
        if (QuickView != null) {
            stmt.bindLong(4, QuickView ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(5, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(6, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyQuery readEntity(Cursor cursor, int offset) {
        MyQuery entity = new MyQuery( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // mQCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ShortName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // QuickView
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // Record_Modified
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyQuery entity, int offset) {
        entity.setMQCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setShortName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuickView(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRecord_Upload(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(MyQuery entity, long rowId) {
        return entity.getMQCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(MyQuery entity) {
        if(entity != null) {
            return entity.getMQCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
