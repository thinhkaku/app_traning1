package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZAircraftMake;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZAIRCRAFT_MAKE.
*/
public class ZAircraftMakeDao extends AbstractDao<ZAircraftMake, Integer> {

    public static final String TABLENAME = "ZAIRCRAFTMAKE";

    /**
     * Properties of entity ZAircraftMake.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ACCode = new Property(0, Integer.class, "ACCode", true, "ACCODE");
        public final static Property ACRef = new Property(1, String.class, "ACRef", false, "ACREF");
        public final static Property Make = new Property(2, String.class, "Make", false, "MAKE");
        public final static Property Model = new Property(3, String.class, "Model", false, "MODEL");
        public final static Property SubModel = new Property(4, String.class, "SubModel", false, "SUB_MODEL");
        public final static Property Rating = new Property(5, String.class, "Rating", false, "RATING");
        public final static Property Category = new Property(6, Integer.class, "Category", false, "CATEGORY");
        public final static Property Class = new Property(7, Integer.class, "Class", false, "CLASS");
        public final static Property Sea = new Property(8, Boolean.class, "Sea", false, "SEA");
        public final static Property Power = new Property(9, Integer.class, "Power", false, "POWER");
        public final static Property Kg5700 = new Property(10, Boolean.class, "Kg5700", false, "KG5700");
        public final static Property TMG = new Property(11, Boolean.class, "TMG", false, "TMG");
        public final static Property Tailwheel = new Property(12, Boolean.class, "Tailwheel", false, "TAILWHEEL");
        public final static Property Complex = new Property(13, Boolean.class, "Complex", false, "COMPLEX");
        public final static Property HighPerf = new Property(14, Boolean.class, "HighPerf", false, "HIGH_PERF");
        public final static Property Aerobatic = new Property(15, Boolean.class, "Aerobatic", false, "AEROBATIC");
        public final static Property Record_Modified = new Property(16, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZAircraftMakeDao(DaoConfig config) {
        super(config);
    }
    
    public ZAircraftMakeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZAIRCRAFTMAKE' (" + //
                "'ACCODE' INTEGER PRIMARY KEY ," + // 0: ACCode
                "'ACREF' TEXT," + // 1: ACRef
                "'MAKE' TEXT," + // 2: Make
                "'MODEL' TEXT," + // 3: Model
                "'SUB_MODEL' TEXT," + // 4: SubModel
                "'RATING' TEXT," + // 5: Rating
                "'CATEGORY' INTEGER," + // 6: Category
                "'CLASS' INTEGER," + // 7: Class
                "'SEA' INTEGER," + // 8: Sea
                "'POWER' INTEGER," + // 9: Power
                "'KG5700' INTEGER," + // 10: Kg5700
                "'TMG' INTEGER," + // 11: TMG
                "'TAILWHEEL' INTEGER," + // 12: Tailwheel
                "'COMPLEX' INTEGER," + // 13: Complex
                "'HIGH_PERF' INTEGER," + // 14: HighPerf
                "'AEROBATIC' INTEGER," + // 15: Aerobatic
                "'RECORD_MODIFIED' INTEGER);"); // 16: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZAIRCRAFTMAKE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZAircraftMake entity) {
        stmt.clearBindings();
 
        Integer ACCode = entity.getACCode();
        if (ACCode != null) {
            stmt.bindLong(1, ACCode);
        }
 
        String ACRef = entity.getACRef();
        if (ACRef != null) {
            stmt.bindString(2, ACRef);
        }
 
        String Make = entity.getMake();
        if (Make != null) {
            stmt.bindString(3, Make);
        }
 
        String Model = entity.getModel();
        if (Model != null) {
            stmt.bindString(4, Model);
        }
 
        String SubModel = entity.getSubModel();
        if (SubModel != null) {
            stmt.bindString(5, SubModel);
        }
 
        String Rating = entity.getRating();
        if (Rating != null) {
            stmt.bindString(6, Rating);
        }
 
        Integer Category = entity.getCategory();
        if (Category != null) {
            stmt.bindLong(7, Category);
        }
 
        Integer Class = entity.getClassZ();
        if (Class != null) {
            stmt.bindLong(8, Class);
        }
 
        Boolean Sea = entity.getSea();
        if (Sea != null) {
            stmt.bindLong(9, Sea ? 1l: 0l);
        }
 
        Integer Power = entity.getPower();
        if (Power != null) {
            stmt.bindLong(10, Power);
        }
 
        Boolean Kg5700 = entity.getKg5700();
        if (Kg5700 != null) {
            stmt.bindLong(11, Kg5700 ? 1l: 0l);
        }
 
        Boolean TMG = entity.getTMG();
        if (TMG != null) {
            stmt.bindLong(12, TMG ? 1l: 0l);
        }
 
        Boolean Tailwheel = entity.getTailwheel();
        if (Tailwheel != null) {
            stmt.bindLong(13, Tailwheel ? 1l: 0l);
        }
 
        Boolean Complex = entity.getComplex();
        if (Complex != null) {
            stmt.bindLong(14, Complex ? 1l: 0l);
        }
 
        Boolean HighPerf = entity.getHighPerf();
        if (HighPerf != null) {
            stmt.bindLong(15, HighPerf ? 1l: 0l);
        }
 
        Boolean Aerobatic = entity.getAerobatic();
        if (Aerobatic != null) {
            stmt.bindLong(16, Aerobatic ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(17, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZAircraftMake readEntity(Cursor cursor, int offset) {
        ZAircraftMake entity = new ZAircraftMake( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ACCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ACRef
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Make
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Model
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SubModel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Rating
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Category
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Class
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // Sea
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // Power
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // Kg5700
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // TMG
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // Tailwheel
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // Complex
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // HighPerf
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // Aerobatic
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZAircraftMake entity, int offset) {
        entity.setACCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setACRef(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMake(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRating(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setClass(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSea(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setPower(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setKg5700(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setTMG(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setTailwheel(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setComplex(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setHighPerf(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setAerobatic(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZAircraftMake entity, long rowId) {
        return entity.getACCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZAircraftMake entity) {
        if(entity != null) {
            return entity.getACCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
