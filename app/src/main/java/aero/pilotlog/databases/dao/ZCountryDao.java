package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZCountry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZCOUNTRY.
*/
public class ZCountryDao extends AbstractDao<ZCountry, Integer> {

    public static final String TABLENAME = "ZCOUNTRY";

    /**
     * Properties of entity ZCountry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CountryCode = new Property(0, Integer.class, "CountryCode", true, "COUNTRYCODE");
        public final static Property ISO_3166 = new Property(1, String.class, "ISO_3166", false, "ISO_3166");
        public final static Property ISO_Long = new Property(2, String.class, "ISO_Long", false, "ISO_LONG");
        public final static Property ISO_Numeric = new Property(3, Long.class, "ISO_Numeric", false, "ISO_NUMERIC");
        public final static Property CountryName = new Property(4, String.class, "CountryName", false, "COUNTRYNAME");
        public final static Property Capital = new Property(5, String.class, "Capital", false, "CAPITAL");
        public final static Property Continent = new Property(6, String.class, "Continent", false, "CONTINENT");
        public final static Property Neighbours = new Property(7, String.class, "Neighbours", false, "NEIGHBOURS");
        public final static Property Tld = new Property(8, String.class, "tld", false, "TLD");
        public final static Property CurrCode = new Property(9, Integer.class, "CurrCode", false, "CURRCODE");
        public final static Property PrefixPhone = new Property(10, String.class, "PrefixPhone", false, "PREFIXPHONE");
        public final static Property PrefixICAO = new Property(11, String.class, "PrefixICAO", false, "PREFIXICAO");
        public final static Property RegAC = new Property(12, String.class, "RegAC", false, "REGAC");
        public final static Property Record_Modified = new Property(13, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZCountryDao(DaoConfig config) {
        super(config);
    }
    
    public ZCountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZCOUNTRY' (" + //
                "'COUNTRY_CODE' INTEGER PRIMARY KEY ," + // 0: CountryCode
                "'ISO_3166' TEXT," + // 1: ISO_3166
                "'ISO_LONG' TEXT," + // 2: ISO_Long
                "'ISO_NUMERIC' INTEGER," + // 3: ISO_Numeric
                "'COUNTRY_NAME' TEXT," + // 4: CountryName
                "'CAPITAL' TEXT," + // 5: Capital
                "'CONTINENT' TEXT," + // 6: Continent
                "'NEIGHBOURS' TEXT," + // 7: Neighbours
                "'TLD' TEXT," + // 8: tld
                "'CURRCODE' INTEGER," + // 9: CurrCode
                "'PREFIX_PHONE' TEXT," + // 10: PrefixPhone
                "'PREFIXICAO' TEXT," + // 11: PrefixICAO
                "'REGAC' TEXT," + // 12: RegAC
                "'RECORD_MODIFIED' INTEGER);"); // 13: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZCOUNTRY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZCountry entity) {
        stmt.clearBindings();
 
        Integer CountryCode = entity.getCountryCode();
        if (CountryCode != null) {
            stmt.bindLong(1, CountryCode);
        }
 
        String ISO_3166 = entity.getISO_3166();
        if (ISO_3166 != null) {
            stmt.bindString(2, ISO_3166);
        }
 
        String ISO_Long = entity.getISO_Long();
        if (ISO_Long != null) {
            stmt.bindString(3, ISO_Long);
        }
 
        Long ISO_Numeric = entity.getISO_Numeric();
        if (ISO_Numeric != null) {
            stmt.bindLong(4, ISO_Numeric);
        }
 
        String CountryName = entity.getCountryName();
        if (CountryName != null) {
            stmt.bindString(5, CountryName);
        }
 
        String Capital = entity.getCapital();
        if (Capital != null) {
            stmt.bindString(6, Capital);
        }
 
        String Continent = entity.getContinent();
        if (Continent != null) {
            stmt.bindString(7, Continent);
        }
 
        String Neighbours = entity.getNeighbours();
        if (Neighbours != null) {
            stmt.bindString(8, Neighbours);
        }
 
        String tld = entity.getTld();
        if (tld != null) {
            stmt.bindString(9, tld);
        }
 
        Integer CurrCode = entity.getCurrCode();
        if (CurrCode != null) {
            stmt.bindLong(10, CurrCode);
        }
 
        String PrefixPhone = entity.getPrefixPhone();
        if (PrefixPhone != null) {
            stmt.bindString(11, PrefixPhone);
        }
 
        String PrefixICAO = entity.getPrefixICAO();
        if (PrefixICAO != null) {
            stmt.bindString(12, PrefixICAO);
        }
 
        String RegAC = entity.getRegAC();
        if (RegAC != null) {
            stmt.bindString(13, RegAC);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(14, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZCountry readEntity(Cursor cursor, int offset) {
        ZCountry entity = new ZCountry( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // CountryCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ISO_3166
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ISO_Long
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // ISO_Numeric
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CountryName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Capital
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Continent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Neighbours
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tld
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // CurrCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PrefixPhone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PrefixICAO
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // RegAC
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZCountry entity, int offset) {
        entity.setCountryCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setISO_3166(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setISO_Long(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setISO_Numeric(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCountryName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCapital(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContinent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNeighbours(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTld(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCurrCode(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPrefixPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrefixICAO(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRegAC(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecord_Modified(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZCountry entity, long rowId) {
        return entity.getCountryCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZCountry entity) {
        if(entity != null) {
            return entity.getCountryCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
