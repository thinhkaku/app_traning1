package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZLaunch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ZLAUNCH.
 */
public class ZLaunchDao extends AbstractDao<ZLaunch, Integer> {

    public static final String TABLENAME = "ZLAUNCH";

    /**
     * Properties of entity ZLaunch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LaunchCode = new Property(0, Integer.class, "LaunchCode", true, "LAUNCHCODE");
        public final static Property LaunchLL = new Property(1, String.class, "LaunchLL", false, "LAUNCHLL");
        public final static Property LaunchShort = new Property(2, String.class, "LaunchShort", false, "LAUNCHSHORT");
        public final static Property LaunchLong = new Property(3, String.class, "LaunchLong", false, "LAUNCHLONG");
        public final static Property Record_Modified = new Property(4, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    }

    ;


    public ZLaunchDao(DaoConfig config) {
        super(config);
    }

    public ZLaunchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'ZLAUNCH' (" + //
                "'LAUNCHCODE' INTEGER PRIMARY KEY ," + // 0: LaunchCode
                "'LAUNCHLL' TEXT," + // 1: LaunchShort
                "'LAUNCHSHORT' TEXT," + // 2: LaunchShort
                "'LAUNCHLONG' TEXT," + // 3: LaunchLong
                "'RECORD_MODIFIED' INTEGER);"); // 4: Record_Modified
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZLAUNCH'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZLaunch entity) {
        stmt.clearBindings();

        Integer LaunchCode = entity.getLaunchCode();
        if (LaunchCode != null) {
            stmt.bindLong(1, LaunchCode);
        }

        String LaunchLL = entity.getLaunchLL();
        if (LaunchLL != null) {
            stmt.bindString(2, LaunchLL);
        }

        String LaunchShort = entity.getLaunchShort();
        if (LaunchShort != null) {
            stmt.bindString(3, LaunchShort);
        }

        String LaunchLong = entity.getLaunchLong();
        if (LaunchLong != null) {
            stmt.bindString(4, LaunchLong);
        }

        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(5, Record_Modified);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ZLaunch readEntity(Cursor cursor, int offset) {
        ZLaunch entity = new ZLaunch( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // LaunchCode
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LaunchShort
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LaunchShort
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LaunchLong
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // Record_Modified
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ZLaunch entity, int offset) {
        entity.setLaunchCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setLaunchLL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLaunchShort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLaunchLong(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecord_Modified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Integer updateKeyAfterInsert(ZLaunch entity, long rowId) {
        return entity.getLaunchCode();
    }

    /**
     * @inheritdoc
     */
    @Override
    public Integer getKey(ZLaunch entity) {
        if (entity != null) {
            return entity.getLaunchCode();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
