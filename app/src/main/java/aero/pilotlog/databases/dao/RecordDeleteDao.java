package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.RecordDelete;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECORD_DELETE.
*/
public class RecordDeleteDao extends AbstractDao<RecordDelete, byte[]> {

    public static final String TABLENAME = "RECORDDELETE";

    /**
     * Properties of entity RecordDelete.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TableName = new Property(0, String.class, "TableName", false, "TABLENAME");
        public final static Property RecordCode = new Property(1, byte[].class, "RecordCode", true, "RECORDCODE");
    };


    public RecordDeleteDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDeleteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECORDDELETE' (" + //
                "'TABLENAME' TEXT," + // 0: TableName
                "'RECORDCODE' BLOB PRIMARY KEY );"); // 1: RecordCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECORDDELETE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecordDelete entity) {
        stmt.clearBindings();
 
        String TableName = entity.getTableName();
        if (TableName != null) {
            stmt.bindString(1, TableName);
        }
 
        byte[] RecordCode = entity.getRecordCode();
        if (RecordCode != null) {
            stmt.bindBlob(2, RecordCode);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public RecordDelete readEntity(Cursor cursor, int offset) {
        RecordDelete entity = new RecordDelete( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // TableName
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1) // RecordCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecordDelete entity, int offset) {
        entity.setTableName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecordCode(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(RecordDelete entity, long rowId) {
        return entity.getRecordCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(RecordDelete entity) {
        if(entity != null) {
            return entity.getRecordCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
