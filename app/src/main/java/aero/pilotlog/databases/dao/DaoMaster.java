package aero.pilotlog.databases.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import aero.pilotlog.utilities.DatabaseUtils;
import aero.pilotlog.utilities.StorageUtils;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AircraftDao.createTable(db, ifNotExists);
        AirfieldDao.createTable(db, ifNotExists);
        AllowanceRulesDao.createTable(db, ifNotExists);
        BackupDBDao.createTable(db, ifNotExists);
        DutyDao.createTable(db, ifNotExists);
        ExpenseDao.createTable(db, ifNotExists);
        FlightDao.createTable(db, ifNotExists);
        ImagePicDao.createTable(db, ifNotExists);
        LimitRulesDao.createTable(db, ifNotExists);
        PilotDao.createTable(db, ifNotExists);
        RecordDeleteDao.createTable(db, ifNotExists);
        SettingConfigDao.createTable(db, ifNotExists);
        SettingLocalDao.createTable(db, ifNotExists);
        SettingUserAccountDao.createTable(db, ifNotExists);
        ValidationRulesDao.createTable(db, ifNotExists);
        WeatherDao.createTable(db, ifNotExists);
        WeatherAFDao.createTable(db, ifNotExists);
        MyQueryDao.createTable(db, ifNotExists);
        MyQueryBuildDao.createTable(db, ifNotExists);
        ZAircraftMakeDao.createTable(db, ifNotExists);
        ZApproachDao.createTable(db, ifNotExists);
        ZApproachCatDao.createTable(db, ifNotExists);
        ZCountryDao.createTable(db, ifNotExists);
        ZCurrencyDao.createTable(db, ifNotExists);
        ZDelayDao.createTable(db, ifNotExists);
        ZDelayGroupDao.createTable(db, ifNotExists);
        ZFNPTDao.createTable(db, ifNotExists);
        ZLaunchDao.createTable(db, ifNotExists);
        ZOperationDao.createTable(db, ifNotExists);
        ZPackageDao.createTable(db, ifNotExists);
        ZTimeZoneDao.createTable(db, ifNotExists);
        ZTimeZoneDSTDao.createTable(db, ifNotExists);
        ZValidationDao.createTable(db, ifNotExists);
        ZLimitDao.createTable(db, ifNotExists);
        ZExpenseDao.createTable(db, ifNotExists);
        ZExpenseGroupDao.createTable(db, ifNotExists);
        QualificationDao.createTable(db, ifNotExists);
        ZQualificationDao.createTable(db, ifNotExists);
        WeatherLocalDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AircraftDao.dropTable(db, ifExists);
        AirfieldDao.dropTable(db, ifExists);
        AllowanceRulesDao.dropTable(db, ifExists);
        BackupDBDao.dropTable(db, ifExists);
        DutyDao.dropTable(db, ifExists);
        ExpenseDao.dropTable(db, ifExists);
        FlightDao.dropTable(db, ifExists);
        ImagePicDao.dropTable(db, ifExists);
        LimitRulesDao.dropTable(db, ifExists);
        PilotDao.dropTable(db, ifExists);
        RecordDeleteDao.dropTable(db, ifExists);
        SettingConfigDao.dropTable(db, ifExists);
        SettingLocalDao.dropTable(db, ifExists);
        SettingUserAccountDao.dropTable(db, ifExists);
        ValidationRulesDao.dropTable(db, ifExists);
        WeatherDao.dropTable(db, ifExists);
        WeatherAFDao.dropTable(db, ifExists);
        MyQueryDao.dropTable(db, ifExists);
        MyQueryBuildDao.dropTable(db, ifExists);
        ZAircraftMakeDao.dropTable(db, ifExists);
        ZApproachDao.dropTable(db, ifExists);
        ZCountryDao.dropTable(db, ifExists);
        ZCurrencyDao.dropTable(db, ifExists);
        ZDelayDao.dropTable(db, ifExists);
        ZDelayGroupDao.dropTable(db, ifExists);
        ZFNPTDao.dropTable(db, ifExists);
        ZLaunchDao.dropTable(db, ifExists);
        ZOperationDao.dropTable(db, ifExists);
        ZPackageDao.dropTable(db, ifExists);
        ZTimeZoneDao.dropTable(db, ifExists);
        ZTimeZoneDSTDao.dropTable(db, ifExists);
        ZValidationDao.dropTable(db, ifExists);
        ZApproachCatDao.dropTable(db, ifExists);
        ZLimitDao.dropTable(db, ifExists);
        ZExpenseDao.dropTable(db, ifExists);
        ZExpenseGroupDao.dropTable(db, ifExists);
        QualificationDao.dropTable(db, ifExists);
        ZQualificationDao.dropTable(db, ifExists);
        WeatherLocalDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, StorageUtils.getStorageRootFolder(context) + DatabaseUtils.DATABASES + name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            //createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        private Context context;
        private static String dbName;

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);

            this.context = context;
            dbName = name;
            try {
                createDataBase(factory);
            } catch (Exception ioe) {
                throw new Error("Unable to create database");
            }
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
        /**
         * Create new database if not present
         */
        public void createDataBase(CursorFactory factory) {
            SQLiteDatabase sqliteDatabase = null;
            try {
                if (DatabaseUtils.databaseExists(context, dbName)) {
                /* Check for Upgrade */

                } else {
                /* Database does not exists create blank database */
                    DatabaseUtils.copyDataBase(context, dbName);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AircraftDao.class);
        registerDaoClass(AirfieldDao.class);
        registerDaoClass(AllowanceRulesDao.class);
        registerDaoClass(BackupDBDao.class);
        registerDaoClass(DutyDao.class);
        registerDaoClass(ExpenseDao.class);
        registerDaoClass(FlightDao.class);
        registerDaoClass(ImagePicDao.class);
        registerDaoClass(LimitRulesDao.class);
        registerDaoClass(PilotDao.class);
        registerDaoClass(RecordDeleteDao.class);
        registerDaoClass(SettingConfigDao.class);
        registerDaoClass(SettingLocalDao.class);
        registerDaoClass(SettingUserAccountDao.class);
        registerDaoClass(ValidationRulesDao.class);
        registerDaoClass(WeatherDao.class);
        registerDaoClass(WeatherAFDao.class);
        registerDaoClass(MyQueryDao.class);
        registerDaoClass(MyQueryBuildDao.class);
        registerDaoClass(ZAircraftMakeDao.class);
        registerDaoClass(ZApproachDao.class);
        registerDaoClass(ZCountryDao.class);
        registerDaoClass(ZCurrencyDao.class);
        registerDaoClass(ZDelayDao.class);
        registerDaoClass(ZDelayGroupDao.class);
        registerDaoClass(ZFNPTDao.class);
        registerDaoClass(ZLaunchDao.class);
        registerDaoClass(ZOperationDao.class);
        registerDaoClass(ZPackageDao.class);
        registerDaoClass(ZTimeZoneDao.class);
        registerDaoClass(ZTimeZoneDSTDao.class);
        registerDaoClass(ZValidationDao.class);
        registerDaoClass(ZApproachCatDao.class);
        registerDaoClass(ZLimitDao.class);
        registerDaoClass(ZExpenseDao.class);
        registerDaoClass(ZExpenseGroupDao.class);
        registerDaoClass(QualificationDao.class);
        registerDaoClass(ZQualificationDao.class);
        registerDaoClass(WeatherLocalDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
