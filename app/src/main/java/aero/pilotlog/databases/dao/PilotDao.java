package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Pilot;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PILOT.
*/
public class PilotDao extends AbstractDao<Pilot, byte[]> {

    public static final String TABLENAME = "PILOT";

    /**
     * Properties of entity Pilot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PilotCode = new Property(0, byte[].class, "PilotCode", true, "PILOTCODE");
        public final static Property Active = new Property(1, Boolean.class, "Active", false, "ACTIVE");
        public final static Property Company = new Property(2, String.class, "Company", false, "COMPANY");
        public final static Property PilotRef = new Property(3, String.class, "PilotRef", false, "PILOTREF");
        public final static Property PilotName = new Property(4, String.class, "PilotName", false, "PILOTNAME");
        public final static Property PilotSearch = new Property(5, String.class, "PilotSearch", false, "PILOTSEARCH");
        public final static Property PilotPhone = new Property(6, String.class, "PilotPhone", false, "PILOTPHONE");
        public final static Property PhoneSearch = new Property(7, String.class, "PhoneSearch", false, "PHONESEARCH");
        public final static Property PilotEMail = new Property(8, String.class, "PilotEMail", false, "PILOTEMAIL");
        public final static Property Facebook = new Property(9, String.class, "Facebook", false, "FACEBOOK");
        public final static Property LinkedIn = new Property(10, String.class, "LinkedIn", false, "LINKEDIN");
        public final static Property Certificate = new Property(11, String.class, "Certificate", false, "CERTIFICATE");
        public final static Property Notes = new Property(12, String.class, "Notes", false, "NOTES");
        public final static Property RosterAlias = new Property(13, String.class, "RosterAlias", false, "ROSTERALIAS");
        public final static Property AirCREWaccount = new Property(14, String.class, "airCREWaccount", false, "AIRCREWACCOUNT");
        public final static Property Record_Modified = new Property(15, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(16, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public PilotDao(DaoConfig config) {
        super(config);
    }
    
    public PilotDao(DaoConfig config, aero.pilotlog.databases.dao.DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PILOT' (" + //
                "'PILOTCODE' BLOB PRIMARY KEY ," + // 0: PilotCode
                "'ACTIVE' INTEGER," + // 1: Active
                "'COMPANY' TEXT," + // 2: Company
                "'PILOTREF' TEXT," + // 3: PilotRef
                "'PILOTNAME' TEXT," + // 4: PilotName
                "'PILOTSEARCH' TEXT," + // 5: PilotSearch
                "'PILOTPHONE' TEXT," + // 6: PilotPhone
                "'PHONESEARCH' TEXT," + // 7: PhoneSearch
                "'PILOTEMAIL' TEXT," + // 8: PilotEMail
                "'FACEBOOK' TEXT," + // 9: Facebook
                "'LINKEDIN' TEXT," + // 10: LinkedIn
                "'CERTIFICATE' TEXT," + // 11: Certificate
                "'NOTES' TEXT," + // 12: Notes
                "'ROSTERALIAS' TEXT," + // 13: RosterAlias
                "'AIRCREWACCOUNT' TEXT," + // 14: airCREWaccount
                "'RECORD_MODIFIED' INTEGER," + // 15: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 16: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PILOT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pilot entity) {
        stmt.clearBindings();
 
        byte[] PilotCode = entity.getPilotCode();
        if (PilotCode != null) {
            stmt.bindBlob(1, PilotCode);
        }
 
        Boolean Active = entity.getActive();
        if (Active != null) {
            stmt.bindLong(2, Active ? 1l: 0l);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(3, Company);
        }
 
        String PilotRef = entity.getPilotRef();
        if (PilotRef != null) {
            stmt.bindString(4, PilotRef);
        }
 
        String PilotName = entity.getPilotName();
        if (PilotName != null) {
            stmt.bindString(5, PilotName);
        }
 
        String PilotSearch = entity.getPilotSearch();
        if (PilotSearch != null) {
            stmt.bindString(6, PilotSearch);
        }
 
        String PilotPhone = entity.getPilotPhone();
        if (PilotPhone != null) {
            stmt.bindString(7, PilotPhone);
        }
 
        String PhoneSearch = entity.getPhoneSearch();
        if (PhoneSearch != null) {
            stmt.bindString(8, PhoneSearch);
        }
 
        String PilotEMail = entity.getPilotEMail();
        if (PilotEMail != null) {
            stmt.bindString(9, PilotEMail);
        }
 
        String Facebook = entity.getFacebook();
        if (Facebook != null) {
            stmt.bindString(10, Facebook);
        }
 
        String LinkedIn = entity.getLinkedIn();
        if (LinkedIn != null) {
            stmt.bindString(11, LinkedIn);
        }
 
        String Certificate = entity.getCertificate();
        if (Certificate != null) {
            stmt.bindString(12, Certificate);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(13, Notes);
        }
 
        String RosterAlias = entity.getRosterAlias();
        if (RosterAlias != null) {
            stmt.bindString(14, RosterAlias);
        }
 
        String airCREWaccount = entity.getAirCREWaccount();
        if (airCREWaccount != null) {
            stmt.bindString(15, airCREWaccount);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(16, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(17, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pilot readEntity(Cursor cursor, int offset) {
        Pilot entity = new Pilot( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // PilotCode
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // Active
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Company
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PilotRef
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PilotName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PilotSearch
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PilotPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PhoneSearch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PilotEMail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Facebook
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // LinkedIn
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Certificate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Notes
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // RosterAlias
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // airCREWaccount
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // Record_Modified
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pilot entity, int offset) {
        entity.setPilotCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setActive(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setCompany(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPilotRef(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPilotName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPilotSearch(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPilotPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoneSearch(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPilotEMail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFacebook(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLinkedIn(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCertificate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNotes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRosterAlias(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAirCREWaccount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRecord_Modified(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setRecord_Upload(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Pilot entity, long rowId) {
        return entity.getPilotCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Pilot entity) {
        if(entity != null) {
            return entity.getPilotCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
