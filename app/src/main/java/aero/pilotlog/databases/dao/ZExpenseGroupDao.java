package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import aero.pilotlog.databases.entities.ZExpenseGroup;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ZEXPENSE_GROUP.
*/
public class ZExpenseGroupDao extends AbstractDao<ZExpenseGroup, Integer> {

    public static final String TABLENAME = "ZEXPENSEGROUP";

    /**
     * Properties of entity ZExpenseGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExpGroupCode = new Property(0, Integer.class, "ExpGroupCode", true, "EXPGROUPCODE");
        public final static Property ExpGroupShort = new Property(1, String.class, "ExpGroupShort", false, "EXPGROUPSHORT");
        public final static Property ExpGroupLong = new Property(2, String.class, "ExpGroupLong", false, "EXPGROUPLONG");
        public final static Property Record_Modified = new Property(3, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZExpenseGroupDao(DaoConfig config) {
        super(config);
    }
    
    public ZExpenseGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZEXPENSEGROUP' (" + //
                "'EXPGROUPCODE' INTEGER PRIMARY KEY ," + // 0: ExpGroupCode
                "'EXPGROUPSHORT' TEXT," + // 1: ExpGroupShort
                "'EXPGROUPLONG' TEXT," + // 2: ExpGroupLong
                "'RECORD_MODIFIED' INTEGER);"); // 3: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZEXPENSEGROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZExpenseGroup entity) {
        stmt.clearBindings();
 
        Integer ExpGroupCode = entity.getExpGroupCode();
        if (ExpGroupCode != null) {
            stmt.bindLong(1, ExpGroupCode);
        }
 
        String ExpGroupShort = entity.getExpGroupShort();
        if (ExpGroupShort != null) {
            stmt.bindString(2, ExpGroupShort);
        }
 
        String ExpGroupLong = entity.getExpGroupLong();
        if (ExpGroupLong != null) {
            stmt.bindString(3, ExpGroupLong);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(4, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZExpenseGroup readEntity(Cursor cursor, int offset) {
        ZExpenseGroup entity = new ZExpenseGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ExpGroupCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ExpGroupShort
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ExpGroupLong
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZExpenseGroup entity, int offset) {
        entity.setExpGroupCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setExpGroupShort(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpGroupLong(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecord_Modified(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZExpenseGroup entity, long rowId) {
        return entity.getExpGroupCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZExpenseGroup entity) {
        if(entity != null) {
            return entity.getExpGroupCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
