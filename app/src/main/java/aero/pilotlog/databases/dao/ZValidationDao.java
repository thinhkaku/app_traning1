package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.ZValidation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZVALIDATION.
*/
public class ZValidationDao extends AbstractDao<ZValidation, Integer> {

    public static final String TABLENAME = "ZVALIDATION";

    /**
     * Properties of entity ZValidation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VTCode = new Property(0, Integer.class, "VTCode", true, "VTCODE");
        public final static Property VTerm = new Property(1, String.class, "VTerm", false, "VTERM");
        public final static Property Record_Modified = new Property(2, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
    };


    public ZValidationDao(DaoConfig config) {
        super(config);
    }
    
    public ZValidationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZVALIDATION' (" + //
                "'VTCODE' INTEGER PRIMARY KEY ," + // 0: VTCode
                "'VTERM' TEXT," + // 1: VTerm
                "'RECORD_MODIFIED' INTEGER);"); // 2: Record_Modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZVALIDATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZValidation entity) {
        stmt.clearBindings();
 
        Integer VTCode = entity.getVTCode();
        if (VTCode != null) {
            stmt.bindLong(1, VTCode);
        }
 
        String VTerm = entity.getVTerm();
        if (VTerm != null) {
            stmt.bindString(2, VTerm);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(3, Record_Modified);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZValidation readEntity(Cursor cursor, int offset) {
        ZValidation entity = new ZValidation( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // VTCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // VTerm
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // Record_Modified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZValidation entity, int offset) {
        entity.setVTCode(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setVTerm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecord_Modified(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ZValidation entity, long rowId) {
        return entity.getVTCode();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ZValidation entity) {
        if(entity != null) {
            return entity.getVTCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
