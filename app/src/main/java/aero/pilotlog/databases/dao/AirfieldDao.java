package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Airfield;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AIRFIELD.
*/
public class AirfieldDao extends AbstractDao<Airfield, byte[]> {

    public static final String TABLENAME = "AIRFIELD";

    /**
     * Properties of entity Airfield.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AFCode = new Property(0, byte[].class, "AFCode", true, "AFCODE");
        public final static Property AFICAO = new Property(1, String.class, "AFICAO", false, "AFICAO");
        public final static Property AFIATA = new Property(2, String.class, "AFIATA", false, "AFIATA");
        public final static Property AFFAA = new Property(3, String.class, "AFFAA", false, "AFFAA");
        public final static Property AFName = new Property(4, String.class, "AFName", false, "AFNAME");
        public final static Property Latitude = new Property(5, Integer.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, Integer.class, "Longitude", false, "LONGITUDE");
        public final static Property AFCountry = new Property(7, Integer.class, "AFCountry", false, "AFCOUNTRY");
        public final static Property AFCat = new Property(8, Integer.class, "AFCat", false, "AFCAT");
        public final static Property ElevationFT = new Property(9, Integer.class, "ElevationFT", false, "ELEVATIONFT");
        public final static Property TZCode = new Property(10, Integer.class, "TZCode", false, "TZCODE");
        public final static Property City = new Property(11, String.class, "City", false, "CITY");
        public final static Property Notes = new Property(12, String.class, "Notes", false, "NOTES");
        public final static Property NotesUser = new Property(13, String.class, "NotesUser", false, "NOTESUSER");
        public final static Property ShowList = new Property(14, Boolean.class, "ShowList", false, "SHOWLIST");
        public final static Property UserEdit = new Property(15, Boolean.class, "UserEdit", false, "USEREDIT");
        public final static Property Record_Modified = new Property(16, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(17, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public AirfieldDao(DaoConfig config) {
        super(config);
    }
    
    public AirfieldDao(DaoConfig config, aero.pilotlog.databases.dao.DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AIRFIELD' (" + //
                "'AFCODE' BLOB PRIMARY KEY ," + // 0: AFCode
                "'AFICAO' TEXT," + // 1: AFICAO
                "'AFIATA' TEXT," + // 2: AFIATA
                "'AFFAA' TEXT," + // 3: AFFAA
                "'AFNAME' TEXT," + // 4: AFName
                "'LATITUDE' INTEGER," + // 5: Latitude
                "'LONGITUDE' INTEGER," + // 6: Longitude
                "'AFCOUNTRY' INTEGER," + // 7: AFCountry
                "'AFCAT' INTEGER," + // 8: AFCat
                "'ELEVATIONFT' INTEGER," + // 9: ElevationFT
                "'TZCODE' INTEGER," + // 10: TZCode
                "'CITY' TEXT," + // 11: City
                "'NOTES' TEXT," + // 12: Notes
                "'NOTESUSER' TEXT," + // 13: NotesUser
                "'SHOWLIST' INTEGER," + // 14: ShowList
                "'USEREDIT' INTEGER," + // 15: UserEdit
                "'RECORD_MODIFIED' INTEGER," + // 16: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 17: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AIRFIELD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Airfield entity) {
        stmt.clearBindings();
 
        byte[] AFCode = entity.getAFCode();
        if (AFCode != null) {
            stmt.bindBlob(1, AFCode);
        }
 
        String AFICAO = entity.getAFICAO();
        if (AFICAO != null) {
            stmt.bindString(2, AFICAO);
        }
 
        String AFIATA = entity.getAFIATA();
        if (AFIATA != null) {
            stmt.bindString(3, AFIATA);
        }
 
        String AFFAA = entity.getAFFAA();
        if (AFFAA != null) {
            stmt.bindString(4, AFFAA);
        }
 
        String AFName = entity.getAFName();
        if (AFName != null) {
            stmt.bindString(5, AFName);
        }
 
        Integer Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindLong(6, Latitude);
        }
 
        Integer Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindLong(7, Longitude);
        }
 
        Integer AFCountry = entity.getAFCountry();
        if (AFCountry != null) {
            stmt.bindLong(8, AFCountry);
        }
 
        Integer AFCat = entity.getAFCat();
        if (AFCat != null) {
            stmt.bindLong(9, AFCat);
        }
 
        Integer ElevationFT = entity.getElevationFT();
        if (ElevationFT != null) {
            stmt.bindLong(10, ElevationFT);
        }
 
        Integer TZCode = entity.getTZCode();
        if (TZCode != null) {
            stmt.bindLong(11, TZCode);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(12, City);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(13, Notes);
        }
 
        String NotesUser = entity.getNotesUser();
        if (NotesUser != null) {
            stmt.bindString(14, NotesUser);
        }
 
        Boolean ShowList = entity.getShowList();
        if (ShowList != null) {
            stmt.bindLong(15, ShowList ? 1l: 0l);
        }
 
        Boolean UserEdit = entity.getUserEdit();
        if (UserEdit != null) {
            stmt.bindLong(16, UserEdit ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(17, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(18, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Airfield readEntity(Cursor cursor, int offset) {
        Airfield entity = new Airfield( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // AFCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AFICAO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AFIATA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AFFAA
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AFName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Latitude
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Longitude
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // AFCountry
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // AFCat
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // ElevationFT
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // TZCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // City
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Notes
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // NotesUser
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // ShowList
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // UserEdit
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // Record_Modified
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Airfield entity, int offset) {
        entity.setAFCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setAFICAO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAFIATA(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAFFAA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAFName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAFCountry(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAFCat(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setElevationFT(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTZCode(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCity(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNotes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNotesUser(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShowList(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setUserEdit(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setRecord_Upload(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Airfield entity, long rowId) {
        return entity.getAFCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Airfield entity) {
        if(entity != null) {
            return entity.getAFCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
