package aero.pilotlog.databases.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aero.pilotlog.databases.entities.Aircraft;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AIRCRAFT.
*/
public class AircraftDao extends AbstractDao<Aircraft, byte[]> {

    public static final String TABLENAME = "AIRCRAFT";

    /**
     * Properties of entity Aircraft.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AircraftCode = new Property(0, byte[].class, "AircraftCode", true, "AIRCRAFTCODE");
        public final static Property Active = new Property(1, Boolean.class, "Active", false, "ACTIVE");
        public final static Property DeviceCode = new Property(2, Integer.class, "DeviceCode", false, "DEVICECODE");
        public final static Property Company = new Property(3, String.class, "Company", false, "COMPANY");
        public final static Property Reference = new Property(4, String.class, "Reference", false, "REFERENCE");
        public final static Property RefSearch = new Property(5, String.class, "RefSearch", false, "REFSEARCH");
        public final static Property Fin = new Property(6, String.class, "Fin", false, "FIN");
        public final static Property Make = new Property(7, String.class, "Make", false, "MAKE");
        public final static Property Model = new Property(8, String.class, "Model", false, "MODEL");
        public final static Property SubModel = new Property(9, String.class, "SubModel", false, "SUBMODEL");
        public final static Property Rating = new Property(10, String.class, "Rating", false, "RATING");
        public final static Property Category = new Property(11, Integer.class, "Category", false, "CATEGORY");
        public final static Property Class = new Property(12, Integer.class, "Class", false, "CLASS");
        public final static Property Sea = new Property(13, Boolean.class, "Sea", false, "SEA");
        public final static Property Power = new Property(14, Integer.class, "Power", false, "POWER");
        public final static Property Kg5700 = new Property(15, Boolean.class, "Kg5700", false, "KG5700");
        public final static Property TMG = new Property(16, Boolean.class, "TMG", false, "TMG");
        public final static Property Tailwheel = new Property(17, Boolean.class, "Tailwheel", false, "TAILWHEEL");
        public final static Property Complex = new Property(18, Boolean.class, "Complex", false, "COMPLEX");
        public final static Property HighPerf = new Property(19, Boolean.class, "HighPerf", false, "HIGHPERF");
        public final static Property Aerobatic = new Property(20, Boolean.class, "Aerobatic", false, "AEROBATIC");
        public final static Property Seats = new Property(21, Integer.class, "Seats", false, "SEATS");
        public final static Property FNPT = new Property(22, Integer.class, "FNPT", false, "FNPT");
        public final static Property DefaultApp = new Property(23, Integer.class, "DefaultApp", false, "DEFAULTAPP");
        public final static Property DefaultLaunch = new Property(24, Integer.class, "DefaultLaunch", false, "DEFAULTLAUNCH");
        public final static Property DefaultOps = new Property(25, Integer.class, "DefaultOps", false, "DEFAULTOPS");
        public final static Property DefaultLog = new Property(26, Integer.class, "DefaultLog", false, "DEFAULTLOG");
        public final static Property CondLog = new Property(27, Integer.class, "CondLog", false, "CONDLOG");
        public final static Property Run2 = new Property(28, Boolean.class, "Run2", false, "RUN2");
        public final static Property Record_Modified = new Property(29, Long.class, "Record_Modified", false, "RECORD_MODIFIED");
        public final static Property Record_Upload = new Property(30, Boolean.class, "Record_Upload", false, "RECORD_UPLOAD");
    };


    public AircraftDao(DaoConfig config) {
        super(config);
    }
    
    public AircraftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AIRCRAFT' (" + //
                "'AIRCRAFTCODE' BLOB PRIMARY KEY ," + // 0: AircraftCode
                "'ACTIVE' INTEGER," + // 1: Active
                "'DEVICECODE' INTEGER," + // 2: DeviceCode
                "'COMPANY' TEXT," + // 3: Company
                "'REFERENCE' TEXT," + // 4: Reference
                "'REF_SEARCH' TEXT," + // 5: RefSearch
                "'FIN' TEXT," + // 6: Fin
                "'MAKE' TEXT," + // 7: Make
                "'MODEL' TEXT," + // 8: Model
                "'SUBMODEL' TEXT," + // 9: SubModel
                "'RATING' TEXT," + // 10: Rating
                "'CATEGORY' INTEGER," + // 11: Category
                "'CLASS' INTEGER," + // 12: Class
                "'SEA' INTEGER," + // 13: Sea
                "'POWER' INTEGER," + // 14: Power
                "'KG5700' INTEGER," + // 15: Kg5700
                "'TMG' INTEGER," + // 16: TMG
                "'TAILWHEEL' INTEGER," + // 17: Tailwheel
                "'COMPLEX' INTEGER," + // 18: Complex
                "'HIGHPERF' INTEGER," + // 19: HighPerf
                "'AEROBATIC' INTEGER," + // 20: Aerobatic
                "'SEATS' INTEGER," + // 21: Seats
                "'FNPT' INTEGER," + // 22: FNPT
                "'DEFAULTAPP' INTEGER," + // 23: DefaultApp
                "'DEFAULTLAUNCH' INTEGER," + // 24: DefaultLaunch
                "'DEFAULTOPS' INTEGER," + // 25: DefaultOps
                "'DEFAULTLOG' INTEGER," + // 26: DefaultLog
                "'COND_LOG' INTEGER," + // 27: CondLog
                "'RUN2' INTEGER," + // 28: Run2
                "'RECORD_MODIFIED' INTEGER," + // 29: Record_Modified
                "'RECORD_UPLOAD' INTEGER);"); // 30: Record_Upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AIRCRAFT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Aircraft entity) {
        stmt.clearBindings();
 
        byte[] AircraftCode = entity.getAircraftCode();
        if (AircraftCode != null) {
            stmt.bindBlob(1, AircraftCode);
        }
 
        Boolean Active = entity.getActive();
        if (Active != null) {
            stmt.bindLong(2, Active ? 1l: 0l);
        }
 
        Integer DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindLong(3, DeviceCode);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(4, Company);
        }
 
        String Reference = entity.getReference();
        if (Reference != null) {
            stmt.bindString(5, Reference);
        }
 
        String RefSearch = entity.getRefSearch();
        if (RefSearch != null) {
            stmt.bindString(6, RefSearch);
        }
 
        String Fin = entity.getFin();
        if (Fin != null) {
            stmt.bindString(7, Fin);
        }
 
        String Make = entity.getMake();
        if (Make != null) {
            stmt.bindString(8, Make);
        }
 
        String Model = entity.getModel();
        if (Model != null) {
            stmt.bindString(9, Model);
        }
 
        String SubModel = entity.getSubModel();
        if (SubModel != null) {
            stmt.bindString(10, SubModel);
        }
 
        String Rating = entity.getRating();
        if (Rating != null) {
            stmt.bindString(11, Rating);
        }
 
        Integer Category = entity.getCategory();
        if (Category != null) {
            stmt.bindLong(12, Category);
        }
 
        Integer Class = entity.getClassZ();
        if (Class != null) {
            stmt.bindLong(13, Class);
        }
 
        Boolean Sea = entity.getSea();
        if (Sea != null) {
            stmt.bindLong(14, Sea ? 1l: 0l);
        }
 
        Integer Power = entity.getPower();
        if (Power != null) {
            stmt.bindLong(15, Power);
        }
 
        Boolean Kg5700 = entity.getKg5700();
        if (Kg5700 != null) {
            stmt.bindLong(16, Kg5700 ? 1l: 0l);
        }
 
        Boolean TMG = entity.getTMG();
        if (TMG != null) {
            stmt.bindLong(17, TMG ? 1l: 0l);
        }
 
        Boolean Tailwheel = entity.getTailwheel();
        if (Tailwheel != null) {
            stmt.bindLong(18, Tailwheel ? 1l: 0l);
        }
 
        Boolean Complex = entity.getComplex();
        if (Complex != null) {
            stmt.bindLong(19, Complex ? 1l: 0l);
        }
 
        Boolean HighPerf = entity.getHighPerf();
        if (HighPerf != null) {
            stmt.bindLong(20, HighPerf ? 1l: 0l);
        }
 
        Boolean Aerobatic = entity.getAerobatic();
        if (Aerobatic != null) {
            stmt.bindLong(21, Aerobatic ? 1l: 0l);
        }
 
        Integer Seats = entity.getSeats();
        if (Seats != null) {
            stmt.bindLong(22, Seats);
        }
 
        Integer FNPT = entity.getFNPT();
        if (FNPT != null) {
            stmt.bindLong(23, FNPT);
        }
 
        Integer DefaultApp = entity.getDefaultApp();
        if (DefaultApp != null) {
            stmt.bindLong(24, DefaultApp);
        }
 
        Integer DefaultLaunch = entity.getDefaultLaunch();
        if (DefaultLaunch != null) {
            stmt.bindLong(25, DefaultLaunch);
        }
 
        Integer DefaultOps = entity.getDefaultOps();
        if (DefaultOps != null) {
            stmt.bindLong(26, DefaultOps);
        }
 
        Integer DefaultLog = entity.getDefaultLog();
        if (DefaultLog != null) {
            stmt.bindLong(27, DefaultLog);
        }
 
        Integer CondLog = entity.getCondLog();
        if (CondLog != null) {
            stmt.bindLong(28, CondLog);
        }
 
        Boolean Run2 = entity.getRun2();
        if (Run2 != null) {
            stmt.bindLong(29, Run2 ? 1l: 0l);
        }
 
        Long Record_Modified = entity.getRecord_Modified();
        if (Record_Modified != null) {
            stmt.bindLong(30, Record_Modified);
        }
 
        Boolean Record_Upload = entity.getRecord_Upload();
        if (Record_Upload != null) {
            stmt.bindLong(31, Record_Upload ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Aircraft readEntity(Cursor cursor, int offset) {
        Aircraft entity = new Aircraft( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // AircraftCode
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // Active
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // DeviceCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Company
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Reference
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // RefSearch
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Fin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Make
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Model
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SubModel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Rating
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Category
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // Class
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // Sea
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // Power
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // Kg5700
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // TMG
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // Tailwheel
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // Complex
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // HighPerf
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // Aerobatic
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // Seats
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // FNPT
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // DefaultApp
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // DefaultLaunch
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // DefaultOps
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // DefaultLog
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // CondLog
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // Run2
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // Record_Modified
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0 // Record_Upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Aircraft entity, int offset) {
        entity.setAircraftCode(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setActive(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDeviceCode(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCompany(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReference(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRefSearch(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMake(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setModel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSubModel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRating(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCategory(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setClass(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSea(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setPower(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setKg5700(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setTMG(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setTailwheel(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setComplex(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setHighPerf(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setAerobatic(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setSeats(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setFNPT(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setDefaultApp(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setDefaultLaunch(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setDefaultOps(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDefaultLog(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setCondLog(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setRun2(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setRecord_Modified(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setRecord_Upload(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(Aircraft entity, long rowId) {
        return entity.getAircraftCode();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(Aircraft entity) {
        if(entity != null) {
            return entity.getAircraftCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
}
